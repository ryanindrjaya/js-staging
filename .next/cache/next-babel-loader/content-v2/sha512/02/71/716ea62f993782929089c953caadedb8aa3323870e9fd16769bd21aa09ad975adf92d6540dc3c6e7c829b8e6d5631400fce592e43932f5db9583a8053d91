{"ast":null,"code":"import _EditOutlined from \"@ant-design/icons/lib/icons/EditOutlined\";\nimport _CheckOutlined from \"@ant-design/icons/lib/icons/CheckOutlined\";\nvar _jsxFileName = \"/Users/yudiananta/Development/NextJS/ERP Dev/JS Deploy/ERP-Sejati/components/EditableComponent.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { Textarea as Input } from './uielements/input';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function EditableComponent(props) {\n  const [state, setState] = React.useState({\n    value: props.value,\n    editable: false\n  });\n\n  function handleChange(event) {\n    const value = event.target.value;\n    setState(_objectSpread(_objectSpread({}, state), {}, {\n      value\n    }));\n  }\n\n  function check() {\n    setState(_objectSpread(_objectSpread({}, state), {}, {\n      editable: false\n    }));\n\n    if (props.onChange) {\n      props.onChange(props.itemKey, state.value);\n    }\n  }\n\n  function edit() {\n    setState(_objectSpread(_objectSpread({}, state), {}, {\n      editable: true\n    }));\n  }\n\n  const {\n    value,\n    editable\n  } = state;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"isoNoteContent\",\n    children: editable ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"isoNoteEditWrapper\",\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        rows: 3,\n        value: value,\n        onChange: handleChange,\n        onPressEnter: check\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(_CheckOutlined, {\n        className: \"isoNoteEditIcon\",\n        onClick: check\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"isoNoteTextWrapper\",\n      onClick: edit,\n      children: [value || ' ', /*#__PURE__*/_jsxDEV(_EditOutlined, {\n        className: \"isoNoteEditIcon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/Users/yudiananta/Development/NextJS/ERP Dev/JS Deploy/ERP-Sejati/components/EditableComponent.js"],"names":["React","Textarea","Input","EditableComponent","props","state","setState","useState","value","editable","handleChange","event","target","check","onChange","itemKey","edit"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,QAAQ,IAAIC,KAArB,QAAkC,oBAAlC;;AAEA,eAAe,SAASC,iBAAT,CAA2BC,KAA3B,EAAkC;AAC/C,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,KAAK,CAACO,QAAN,CAAe;AACvCC,IAAAA,KAAK,EAAEJ,KAAK,CAACI,KAD0B;AAEvCC,IAAAA,QAAQ,EAAE;AAF6B,GAAf,CAA1B;;AAKA,WAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAC3B,UAAMH,KAAK,GAAGG,KAAK,CAACC,MAAN,CAAaJ,KAA3B;AACAF,IAAAA,QAAQ,iCAAMD,KAAN;AAAaG,MAAAA;AAAb,OAAR;AACD;;AACD,WAASK,KAAT,GAAiB;AACfP,IAAAA,QAAQ,iCAAMD,KAAN;AAAaI,MAAAA,QAAQ,EAAE;AAAvB,OAAR;;AACA,QAAIL,KAAK,CAACU,QAAV,EAAoB;AAClBV,MAAAA,KAAK,CAACU,QAAN,CAAeV,KAAK,CAACW,OAArB,EAA8BV,KAAK,CAACG,KAApC;AACD;AACF;;AACD,WAASQ,IAAT,GAAgB;AACdV,IAAAA,QAAQ,iCAAMD,KAAN;AAAaI,MAAAA,QAAQ,EAAE;AAAvB,OAAR;AACD;;AAED,QAAM;AAAED,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAsBJ,KAA5B;AACA,sBACE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA,cACGI,QAAQ,gBACP;AAAK,MAAA,SAAS,EAAC,oBAAf;AAAA,8BACE,QAAC,KAAD;AACE,QAAA,IAAI,EAAE,CADR;AAEE,QAAA,KAAK,EAAED,KAFT;AAGE,QAAA,QAAQ,EAAEE,YAHZ;AAIE,QAAA,YAAY,EAAEG;AAJhB;AAAA;AAAA;AAAA;AAAA,cADF,eAOE;AAAe,QAAA,SAAS,EAAC,iBAAzB;AAA2C,QAAA,OAAO,EAAEA;AAApD;AAAA;AAAA;AAAA;AAAA,cAPF;AAAA;AAAA;AAAA;AAAA;AAAA,YADO,gBAWP;AAAG,MAAA,SAAS,EAAC,oBAAb;AAAkC,MAAA,OAAO,EAAEG,IAA3C;AAAA,iBACGR,KAAK,IAAI,GADZ,eAEE;AAAc,QAAA,SAAS,EAAC;AAAxB;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAZJ;AAAA;AAAA;AAAA;AAAA,UADF;AAoBD","sourcesContent":["import React from 'react';\nimport { CheckOutlined, EditOutlined } from '@ant-design/icons';\nimport { Textarea as Input } from './uielements/input';\n\nexport default function EditableComponent(props) {\n  const [state, setState] = React.useState({\n    value: props.value,\n    editable: false,\n  });\n\n  function handleChange(event) {\n    const value = event.target.value;\n    setState({ ...state, value });\n  }\n  function check() {\n    setState({ ...state, editable: false });\n    if (props.onChange) {\n      props.onChange(props.itemKey, state.value);\n    }\n  }\n  function edit() {\n    setState({ ...state, editable: true });\n  }\n\n  const { value, editable } = state;\n  return (\n    <div className=\"isoNoteContent\">\n      {editable ? (\n        <div className=\"isoNoteEditWrapper\">\n          <Input\n            rows={3}\n            value={value}\n            onChange={handleChange}\n            onPressEnter={check}\n          />\n          <CheckOutlined className=\"isoNoteEditIcon\" onClick={check} />\n        </div>\n      ) : (\n        <p className=\"isoNoteTextWrapper\" onClick={edit}>\n          {value || ' '}\n          <EditOutlined className=\"isoNoteEditIcon\" />\n        </p>\n      )}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}