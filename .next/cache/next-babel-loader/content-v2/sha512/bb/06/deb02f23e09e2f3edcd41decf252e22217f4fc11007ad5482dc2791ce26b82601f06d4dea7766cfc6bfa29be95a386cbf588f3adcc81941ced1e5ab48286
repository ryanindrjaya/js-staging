{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport Button from '@iso/components/uielements/button';\nimport Input from '@iso/components/uielements/input';\nimport Modal from '@iso/components/Feedback/Modal';\nimport { notification } from '@iso/components';\nimport { signInWithEmail, signUpWithEmailAndPassword, resetPassword } from '@iso/lib/firebase/firebase.authentication.util';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport default function FirebaseForm(props) {\n  const [state, setState] = React.useState({\n    visible: false,\n    email: 'demo@gmail.com',\n    password: 'demodemo',\n    confirmLoading: false\n  });\n\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setState(_objectSpread(_objectSpread({}, state), {}, {\n      [name]: value\n    }));\n  };\n\n  const showModal = () => {\n    setState(_objectSpread(_objectSpread({}, state), {}, {\n      visible: true\n    }));\n  };\n\n  const handleCancel = e => {\n    setState(_objectSpread(_objectSpread({}, state), {}, {\n      visible: false\n    }));\n  };\n\n  const handleLogin = async () => {\n    const {\n      email,\n      password\n    } = state;\n\n    if (!(email && password)) {\n      notification('error', 'Please fill in email. and password');\n      return;\n    }\n\n    setState(_objectSpread(_objectSpread({}, state), {}, {\n      confirmLoading: true\n    }));\n    let user;\n    let message;\n\n    if (props.signup) {\n      try {\n        await signUpWithEmailAndPassword(email, password).then(authUser => {\n          user = authUser.user;\n          console.log(user, 'User');\n        });\n      } catch (error) {\n        message = error.message;\n        console.log(error.message, 'Error');\n      }\n    } else {\n      try {\n        await signInWithEmail(email, password).then(authUser => {\n          user = authUser.user;\n        });\n      } catch (error) {\n        message = error.message;\n        console.log(error.message, 'Error');\n      }\n    }\n\n    if (user) {\n      const token = await user.getIdToken();\n      props.login(token);\n      props.history.push('/dashboard');\n    } else {\n      notification('error', message);\n      setState(_objectSpread(_objectSpread({}, state), {}, {\n        confirmLoading: false\n      }));\n    }\n  };\n\n  const handleResetPassword = () => {\n    const {\n      email\n    } = state;\n\n    if (!email) {\n      notification('error', `Please fill in email.`);\n      return;\n    }\n\n    resetPassword(email).then(() => notification('success', `Password reset email sent to ${email}.`)).catch(error => notification('error', 'Email address not found.'));\n  };\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(Button, {\n      type: \"primary\",\n      onClick: showModal,\n      className: \"btnFirebase\",\n      children: props.signup ? 'Sign up with Firebase' : 'Sign in with Firebase'\n    }), /*#__PURE__*/_jsx(Modal, {\n      title: props.signup ? 'Sign up with Firebase' : 'Sign in with Firebase',\n      visible: state.visible,\n      confirmLoading: state.confirmLoading,\n      onCancel: handleCancel,\n      onOk: handleLogin,\n      className: \"isoFirebaseLoginModal\",\n      cancelText: \"Cancel\",\n      okText: props.signup ? 'Sign Up' : 'Login',\n      children: /*#__PURE__*/_jsxs(\"form\", {\n        children: [/*#__PURE__*/_jsxs(\"div\", {\n          className: \"isoInputWrapper\",\n          children: [/*#__PURE__*/_jsx(\"label\", {\n            children: \"Email\"\n          }), /*#__PURE__*/_jsx(Input, {\n            name: \"email\",\n            size: \"large\",\n            placeholder: \"Email\",\n            value: state.email,\n            onChange: handleChange\n          })]\n        }), /*#__PURE__*/_jsxs(\"div\", {\n          className: \"isoInputWrapper\",\n          style: {\n            marginBottom: 10\n          },\n          children: [/*#__PURE__*/_jsx(\"label\", {\n            children: \"Password\"\n          }), /*#__PURE__*/_jsx(Input, {\n            name: \"password\",\n            type: \"password\",\n            size: \"large\",\n            placeholder: \"Password\",\n            value: state.password,\n            onChange: handleChange\n          })]\n        }), /*#__PURE__*/_jsx(\"span\", {\n          className: \"isoResetPass\",\n          onClick: handleResetPassword,\n          children: \"Reset Password\"\n        })]\n      })\n    })]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}