{"ast":null,"code":"import { createStore, applyMiddleware } from \"redux\";\nimport createSagaMiddleware, { END } from \"redux-saga\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./root-reducer\";\nimport rootSaga from \"./root-saga\";\nconst sagaMiddleware = createSagaMiddleware();\n\nconst bindMiddleware = middleware => {\n  if (false) {\n    const {\n      composeWithDevTools\n    } = require(\"redux-devtools-extension\");\n\n    return composeWithDevTools(applyMiddleware(...middleware));\n  }\n\n  return applyMiddleware(...middleware);\n};\n\nfunction configureStore(initialState = {}) {\n  const store = createStore(rootReducer, initialState, bindMiddleware([thunk, sagaMiddleware]));\n\n  store.runSaga = () => {\n    // Avoid running twice\n    if (store.saga) return;\n    store.saga = sagaMiddleware.run(rootSaga);\n  };\n\n  store.stopSaga = async () => {\n    // Avoid running twice\n    if (!store.saga) return;\n    store.dispatch(END);\n    await store.saga.done;\n    store.saga = null;\n  };\n\n  store.execSagaTasks = async (isServer, tasks) => {\n    // run saga\n    store.runSaga(); // dispatch saga tasks\n\n    tasks(store.dispatch); // Stop running and wait for the tasks to be done\n\n    await store.stopSaga(); // Re-run on client side\n\n    if (!isServer) {\n      store.runSaga();\n    }\n  }; // Initial run\n\n\n  store.runSaga();\n  return store;\n}\n\nexport default configureStore;","map":null,"metadata":{},"sourceType":"module"}