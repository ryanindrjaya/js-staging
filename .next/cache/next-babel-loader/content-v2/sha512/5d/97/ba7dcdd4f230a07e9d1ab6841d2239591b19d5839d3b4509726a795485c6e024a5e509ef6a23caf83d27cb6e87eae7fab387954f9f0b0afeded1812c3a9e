{"ast":null,"code":"import _Form from \"antd/lib/form\";\nimport _CaretDownOutlined from \"@ant-design/icons/lib/icons/CaretDownOutlined\";\nimport _Select from \"antd/lib/select\";\nimport React, { useState } from \"react\";\nimport nookies from \"nookies\";\nimport action from \"@iso/redux/application/order/action\";\nimport { useDispatch } from \"react-redux\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nconst {\n  addProduct\n} = action;\nexport default function SearchBar({\n  form,\n  tempList,\n  onChange,\n  selectedProduct,\n  user,\n  isBasedOnLocation = true\n}) {\n  const dispatch = useDispatch();\n  const {\n    0: product,\n    1: setProduct\n  } = useState();\n  const {\n    0: data,\n    1: setData\n  } = useState([]);\n  const cookies = nookies.get(null, \"token\");\n  const productList = [];\n\n  const handleChange = async id => {};\n\n  const handleSelect = async id => {\n    const endpoint = process.env.NEXT_PUBLIC_URL + `/products/${id}`;\n    const options = {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + cookies.token\n      }\n    };\n    const req = await fetch(endpoint, options);\n    const res = await req.json();\n\n    if (res) {\n      dispatch({\n        type: \"ADD_PRODUCT\",\n        product: res.data\n      });\n      form.setFieldsValue({\n        products: undefined\n      });\n    }\n  };\n\n  const getUserInfo = async () => {\n    const endpoint = process.env.NEXT_PUBLIC_URL + `/users/me?populate=*`;\n    const options = {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + cookies.token\n      }\n    };\n    const req = await fetch(endpoint, options);\n    const res = await req.json();\n    var queryLocations = \"\";\n    res.locations.forEach(location => {\n      queryLocations = queryLocations + \"filters[locations][name][$contains]=\" + location.name + \"&\";\n    }); // console.log(\"querylocation \" + queryLocations);\n\n    return queryLocations;\n  };\n\n  const handleSearch = newValue => {\n    if (newValue) {\n      fetchProduct(newValue, setData);\n    } else {\n      setData([]);\n    }\n  };\n\n  const options = data.map(d => /*#__PURE__*/_jsx(_Select.Option, {\n    children: d.label\n  }, d.value));\n\n  const fetchProduct = async (query, callback) => {\n    if (!query) {\n      callback([]);\n    } else {\n      try {\n        let queryLocations = await getUserInfo();\n        const endpoint = process.env.NEXT_PUBLIC_URL + `/products?populate=locations&filters[name][$contains]=${query}&${queryLocations}`;\n        const options = {\n          method: \"GET\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: \"Bearer \" + cookies.token\n          }\n        };\n        console.log(endpoint);\n        const req = await fetch(endpoint, options);\n        const res = await req.json();\n\n        if (req.status == 200) {\n          // filter product that already added\n          // const filteredProduct = res.data.filter((item) => {\n          //   return !selectedProduct?.some((temp) => temp.id == item.id);\n          // });\n          // product based on user location\n          const filteredProductByLocation = res.data.filter(item => item.attributes.locations.data.some(location => user.locations.some(userLocation => userLocation.id === location.id)));\n          console.log(filteredProductByLocation);\n          const products = filteredProductByLocation.map(product => ({\n            label: `${product.attributes.name}`,\n            value: product.id\n          }));\n          callback(products);\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: /*#__PURE__*/_jsx(\"div\", {\n      className: \"w-full md:w-full mb-2 md:mb-0\",\n      children: /*#__PURE__*/_jsx(_Form.Item, {\n        name: \"products\",\n        children: /*#__PURE__*/_jsx(_Select, {\n          allowClear: true,\n          size: \"large\",\n          showSearch: true,\n          value: product,\n          placeholder: \"Ketikan Nama Produk / SKU\",\n          onSearch: handleSearch,\n          onChange: handleChange,\n          onSelect: handleSelect,\n          filterOption: false,\n          defaultActiveFirstOption: false,\n          suffixIcon: /*#__PURE__*/_jsx(_CaretDownOutlined, {}),\n          style: {\n            width: \"100%\"\n          },\n          children: options\n        })\n      })\n    })\n  });\n}","map":null,"metadata":{},"sourceType":"module"}