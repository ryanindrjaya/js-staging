{"ast":null,"code":"import _asyncToGenerator from \"/Users/yudiananta/Development/NextJS/ERP Dev/JS Deploy/ERP-Sejati/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _regeneratorRuntime from \"/Users/yudiananta/Development/NextJS/ERP Dev/JS Deploy/ERP-Sejati/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport React from \"react\";\nimport nookies from \"nookies\";\nimport * as moment from \"moment\";\n// In this scenario, we will look up for data in inventory details with params exp.date, productId, and LocationId\n// if data is already exist, then we should update the stock inventory details with the exp.date\n// if they are not, then we create a new inventory details\n// It happens with master inventory too. So basicly, we gonna check first. If exist, then UPDATE.\nvar cookies = nookies.get(null, \"token\");\n\nvar calculateTotalUnit = function calculateTotalUnit(unit, product) {\n  var total = 1;\n  var productIndex = 0;\n  var productSmallestUnit = \"\";\n\n  for (var index = 1; index < 6; index++) {\n    if (product.attributes[\"unit_\".concat(index)] === unit) {\n      productIndex = index;\n    }\n\n    if (product.attributes[\"unit_\".concat(index)]) {\n      productSmallestUnit = product.attributes[\"unit_\".concat(index)];\n    }\n  }\n\n  for (var _index = productIndex + 1; _index < 6; _index++) {\n    total = total * product.attributes[\"qty_\".concat(_index)];\n\n    if (total === 0) {\n      total = 1;\n    }\n  }\n\n  return {\n    total: total,\n    productSmallestUnit: productSmallestUnit\n  };\n};\n\nfunction createInventory(data) {\n  var purchasingDetails = data.attributes.purchasing_details.data;\n  purchasingDetails.forEach(function (element) {\n    var expiredDate = new Date(element.attributes.expired_date);\n    var batch = element.attributes.batch;\n    var unitOrder = element.attributes.unit_order;\n    var totalOrder = parseInt(element.attributes.total_order);\n    var product = element.attributes.product.data;\n    var result = calculateTotalUnit(unitOrder, product);\n    var totalQty = result.total * totalOrder;\n    var location = element.attributes.location.data;\n    var data = {\n      data: {\n        expired_date: expiredDate,\n        batch: batch,\n        products: {\n          id: product.id\n        },\n        stock: totalQty,\n        smallest_unit: result.productSmallestUnit,\n        locations: {\n          id: location.id\n        },\n        keterangan: \"Pembelian\"\n      }\n    }; // check existing stock\n\n    checkDetailStock(data, product.id, location.id); //\n  });\n}\n\nvar checkDetailStock = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data, productId, locationId) {\n    var endpoint, options, req, res;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            endpoint = process.env.NEXT_PUBLIC_URL + \"/inventory-details?filters[locations][id][$eq]=\".concat(locationId, \"&filters[products][id][$eq]=\").concat(productId, \"&filters[expired_date][$eq]=2024-10-01&populate=*\");\n            options = {\n              method: \"GET\",\n              headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: \"Bearer \" + cookies.token\n              }\n            };\n            _context.next = 4;\n            return fetch(endpoint, options);\n\n          case 4:\n            req = _context.sent;\n            _context.next = 7;\n            return req.json();\n\n          case 7:\n            res = _context.sent;\n\n            if (res.data.length > 0) {\n              updateAPI(res.data[0], data, productId, locationId);\n            } else {\n              createAPI(data, productId, locationId);\n            }\n\n            createInventoryHistory(data);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function checkDetailStock(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar updateAPI = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(resData, data, productId, locationId) {\n    var currentStock, finalStock, newData, JSONdata, endpoint, options, req, res;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            currentStock = resData.attributes.stock;\n            finalStock = currentStock + data.data.stock;\n            resData.attributes.stock = finalStock;\n            resData.attributes.locations = data.data.locations;\n            resData.attributes.products = data.data.products;\n            newData = {\n              data: resData.attributes\n            };\n            JSONdata = JSON.stringify(newData);\n            endpoint = process.env.NEXT_PUBLIC_URL + \"/inventory-details/\" + resData.id;\n            options = {\n              method: \"PUT\",\n              headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: \"Bearer \" + cookies.token\n              },\n              body: JSONdata\n            };\n            _context2.next = 11;\n            return fetch(endpoint, options);\n\n          case 11:\n            req = _context2.sent;\n            _context2.next = 14;\n            return req.json();\n\n          case 14:\n            res = _context2.sent;\n\n            if (req.status === 200) {\n              createInventoryAPI(locationId, productId, data.data.stock, data);\n            }\n\n          case 16:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function updateAPI(_x4, _x5, _x6, _x7) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nvar createAPI = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(data, productId, locationId) {\n    var JSONdata, endpoint, options, req, res;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            JSONdata = JSON.stringify(data);\n            endpoint = process.env.NEXT_PUBLIC_URL + \"/inventory-details\";\n            options = {\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: \"Bearer \" + cookies.token\n              },\n              body: JSONdata\n            };\n            _context3.next = 5;\n            return fetch(endpoint, options);\n\n          case 5:\n            req = _context3.sent;\n            _context3.next = 8;\n            return req.json();\n\n          case 8:\n            res = _context3.sent;\n\n            if (req.status === 200) {\n              // check data location\n              createInventoryAPI(locationId, productId, data.data.stock, data);\n            }\n\n          case 10:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function createAPI(_x8, _x9, _x10) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nvar createInventoryHistory = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(data) {\n    var JSONdata, endpoint, options, req, res;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            JSONdata = JSON.stringify(data);\n            endpoint = process.env.NEXT_PUBLIC_URL + \"/inventory-histories\";\n            options = {\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: \"Bearer \" + cookies.token\n              },\n              body: JSONdata\n            };\n            _context4.next = 5;\n            return fetch(endpoint, options);\n\n          case 5:\n            req = _context4.sent;\n            _context4.next = 8;\n            return req.json();\n\n          case 8:\n            res = _context4.sent;\n\n          case 9:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n\n  return function createInventoryHistory(_x11) {\n    return _ref4.apply(this, arguments);\n  };\n}(); // ======================= MASTER INVENTORY =======================\n\n\nvar createInventoryAPI = /*#__PURE__*/function () {\n  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(locationId, productId, quantity, data) {\n    var endpoint, options, req, res, totalStock;\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            endpoint = process.env.NEXT_PUBLIC_URL + \"/inventories?filters[locations][id][$eq]=\".concat(locationId, \"&filters[products][id][$eq]=\").concat(productId, \"&populate=locations\");\n            options = {\n              method: \"GET\",\n              headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: \"Bearer \" + cookies.token\n              }\n            };\n            _context5.next = 4;\n            return fetch(endpoint, options);\n\n          case 4:\n            req = _context5.sent;\n            _context5.next = 7;\n            return req.json();\n\n          case 7:\n            res = _context5.sent;\n\n            if (!(res.data.length > 0)) {\n              _context5.next = 14;\n              break;\n            }\n\n            // put existing data\n            totalStock = res.data[0].attributes.total_stock + quantity;\n            _context5.next = 12;\n            return putExistingData(res.data[0].id, res.data[0].attributes, totalStock);\n\n          case 12:\n            _context5.next = 16;\n            break;\n\n          case 14:\n            _context5.next = 16;\n            return createNewData(data, locationId);\n\n          case 16:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n\n  return function createInventoryAPI(_x12, _x13, _x14, _x15) {\n    return _ref5.apply(this, arguments);\n  };\n}();\n\nvar putExistingData = /*#__PURE__*/function () {\n  var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(id, data, totalStock) {\n    var putData, JSONdata, endpoint, options, req;\n    return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            data.total_stock = totalStock;\n            data.locations = {\n              id: data.locations.data[0].id\n            };\n            putData = {\n              data: data\n            };\n            JSONdata = JSON.stringify(putData);\n            endpoint = process.env.NEXT_PUBLIC_URL + \"/inventories/\" + id;\n            options = {\n              method: \"PUT\",\n              headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: \"Bearer \" + cookies.token\n              },\n              body: JSONdata\n            };\n            _context6.next = 8;\n            return fetch(endpoint, options);\n\n          case 8:\n            req = _context6.sent;\n\n          case 9:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6);\n  }));\n\n  return function putExistingData(_x16, _x17, _x18) {\n    return _ref6.apply(this, arguments);\n  };\n}();\n\nvar createNewData = /*#__PURE__*/function () {\n  var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(data, locationId) {\n    var JSONdata, endpoint, options, req;\n    return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            data.data.total_stock = data.data.stock;\n            data.data.locations = {\n              id: locationId\n            };\n            JSONdata = JSON.stringify(data);\n            endpoint = process.env.NEXT_PUBLIC_URL + \"/inventories\";\n            options = {\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: \"Bearer \" + cookies.token\n              },\n              body: JSONdata\n            };\n            _context7.next = 7;\n            return fetch(endpoint, options);\n\n          case 7:\n            req = _context7.sent;\n\n          case 8:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee7);\n  }));\n\n  return function createNewData(_x19, _x20) {\n    return _ref7.apply(this, arguments);\n  };\n}();\n\nvar getUserLocation = /*#__PURE__*/function () {\n  var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(cookies) {\n    var endpoint, options, req, res;\n    return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            endpoint = process.env.NEXT_PUBLIC_URL + \"/users/me?populate=*\";\n            options = {\n              method: \"GET\",\n              headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: \"Bearer \" + cookies.token\n              },\n              body: JSONdata\n            };\n            _context8.next = 4;\n            return fetch(endpoint, options);\n\n          case 4:\n            req = _context8.sent;\n            _context8.next = 7;\n            return req.json();\n\n          case 7:\n            res = _context8.sent;\n            return _context8.abrupt(\"return\", res);\n\n          case 9:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, _callee8);\n  }));\n\n  return function getUserLocation(_x21) {\n    return _ref8.apply(this, arguments);\n  };\n}();\n\nexport default createInventory;","map":null,"metadata":{},"sourceType":"module"}