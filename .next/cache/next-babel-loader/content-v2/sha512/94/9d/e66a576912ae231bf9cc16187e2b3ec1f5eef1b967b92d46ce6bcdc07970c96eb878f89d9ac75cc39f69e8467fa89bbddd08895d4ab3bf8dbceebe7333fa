{"ast":null,"code":"var _marked = /*#__PURE__*/_regeneratorRuntime.mark(changedCard),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(initData),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(updateData),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(Saga);\n\nimport _regeneratorRuntime from \"/Users/yudiananta/Development/NextJS/ERP Dev/JS Deploy/ERP-Sejati/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport { all, takeEvery, put } from 'redux-saga/effects';\nimport actions from './actions';\nimport fake from './fake';\nimport fakeinitdata from './config';\nexport function changedCard() {\n  return _regeneratorRuntime.wrap(function changedCard$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeEvery(actions.CHANGE_CARDS, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n            return _regeneratorRuntime.wrap(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _callee);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked);\n}\nexport function initData() {\n  var fakeData;\n  return _regeneratorRuntime.wrap(function initData$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          fakeData = fakeinitdata;\n\n          if (fakeinitdata.productQuantity.length === 0) {\n            fakeData = fake;\n          }\n\n          _context3.next = 4;\n          return put({\n            type: actions.INIT_DATA,\n            payload: fakeData\n          });\n\n        case 4:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked2);\n}\nexport function updateData(_ref) {\n  var products, productQuantity;\n  return _regeneratorRuntime.wrap(function updateData$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          products = _ref.products, productQuantity = _ref.productQuantity;\n          localStorage.setItem('cartProductQuantity', JSON.stringify(productQuantity));\n          localStorage.setItem('cartProducts', JSON.stringify(products));\n          _context4.next = 5;\n          return put({\n            type: actions.UPDATE_DATA,\n            products: products,\n            productQuantity: productQuantity\n          });\n\n        case 5:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked3);\n}\nexport default function Saga() {\n  return _regeneratorRuntime.wrap(function Saga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([takeEvery(actions.INIT_DATA_SAGA, initData), takeEvery(actions.UPDATE_DATA_SAGA, updateData)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked4);\n}","map":null,"metadata":{},"sourceType":"module"}