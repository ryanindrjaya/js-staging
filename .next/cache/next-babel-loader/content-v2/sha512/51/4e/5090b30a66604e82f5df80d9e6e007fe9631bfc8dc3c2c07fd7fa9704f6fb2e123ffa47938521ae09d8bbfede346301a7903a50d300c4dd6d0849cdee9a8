{"ast":null,"code":"const _excluded = [\"type\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport clone from 'clone';\nimport { newInvoice } from './config';\nimport actions from './actions';\nconst initState = {\n  invoices: [],\n  initialInvoices: false,\n  currentInvoice: {},\n  editableInvoice: {},\n  isNewInvoice: false,\n  enableEditView: false\n};\nexport default function cardReducer(state = initState, _ref) {\n  let {\n    type\n  } = _ref,\n      action = _objectWithoutProperties(_ref, _excluded);\n\n  switch (type) {\n    case actions.UPDATE_INVOICE:\n      {\n        const currentInvoice = action.invoice ? action.invoice : state.currentInvoice;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          invoices: action.invoices,\n          currentInvoice: clone(currentInvoice),\n          initialInvoices: true,\n          isNewInvoice: false,\n          enableEditView: false\n        });\n      }\n\n    case actions.SELECT_CURRENT_INVOICE:\n      {\n        const invoices = state.invoices;\n        const index = invoices.map(invoice => invoice.id).indexOf(action.id);\n        const isNewInvoice = index === -1;\n        const currentInvoice = isNewInvoice ? _objectSpread({\n          id: action.id,\n          number: `#${action.id}`,\n          key: action.id\n        }, newInvoice) : invoices[index];\n        const enableEditView = isNewInvoice;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          currentInvoice,\n          isNewInvoice,\n          enableEditView,\n          editableInvoice: clone(currentInvoice)\n        });\n      }\n\n    case actions.TOGGLE_VIEW:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        enableEditView: action.view,\n        editableInvoice: clone(state.currentInvoice)\n      });\n\n    case actions.UPDATE_EDIT_INVOICE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        editableInvoice: clone(action.invoice)\n      });\n\n    default:\n      return state;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}