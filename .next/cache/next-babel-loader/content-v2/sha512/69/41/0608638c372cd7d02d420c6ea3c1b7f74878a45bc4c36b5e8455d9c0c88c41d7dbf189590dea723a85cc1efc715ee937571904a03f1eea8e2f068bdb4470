{"ast":null,"code":"const _excluded = [\"item\", \"submenuStyle\", \"submenuColor\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport { useRouter } from 'next/router';\nimport Link from 'next/link';\nimport Menu from '@iso/components/uielements/menu';\nimport siteConfig from '@iso/config/site.config';\nimport IntlMessages from '@iso/components/utility/intlMessages';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst SubMenu = Menu.SubMenu;\nexport default function SidebarMenu(_ref) {\n  let {\n    item,\n    submenuStyle,\n    submenuColor\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  const router = useRouter();\n  const {\n    key,\n    label,\n    leftIcon,\n    children\n  } = item;\n  const url = siteConfig.dashboard;\n\n  const handleClick = (event, linkTo) => {\n    event.preventDefault();\n    router.push(linkTo);\n  };\n\n  if (children) {\n    return /*#__PURE__*/_jsx(SubMenu, _objectSpread(_objectSpread({\n      title: /*#__PURE__*/_jsxs(\"span\", {\n        className: \"isoMenuHolder\",\n        style: submenuColor,\n        children: [leftIcon, /*#__PURE__*/_jsx(\"span\", {\n          className: \"nav-text\",\n          children: /*#__PURE__*/_jsx(IntlMessages, {\n            id: label\n          })\n        })]\n      })\n    }, rest), {}, {\n      children: children.map(({\n        key,\n        label,\n        withoutDashboard\n      }) => {\n        const linkTo = withoutDashboard ? `/${key}` : `${url}/${key}`;\n        return /*#__PURE__*/_jsx(Menu.Item, {\n          style: submenuStyle,\n          children: /*#__PURE__*/_jsx(\"a\", {\n            href: linkTo,\n            onClick: even => handleClick(event, linkTo),\n            className: \"isoMenuHolder\",\n            style: submenuColor,\n            children: /*#__PURE__*/_jsx(IntlMessages, {\n              id: label\n            })\n          })\n        }, key);\n      })\n    }), key);\n  }\n\n  return /*#__PURE__*/_jsx(Menu.Item, _objectSpread(_objectSpread({}, rest), {}, {\n    children: /*#__PURE__*/_jsx(Link, {\n      href: `${url}/${key}`,\n      children: /*#__PURE__*/_jsxs(\"a\", {\n        className: \"isoMenuHolder\",\n        style: submenuColor,\n        children: [leftIcon, /*#__PURE__*/_jsx(\"span\", {\n          className: \"nav-text\",\n          children: /*#__PURE__*/_jsx(IntlMessages, {\n            id: label\n          })\n        })]\n      })\n    })\n  }), key);\n}","map":null,"metadata":{},"sourceType":"module"}