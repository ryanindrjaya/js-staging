{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { all, takeEvery, put, call, fork, select } from 'redux-saga/effects';\nimport actions from './actions';\nimport { rsf, db } from '@iso/lib/firebase/firebase';\nimport { getDocuments, getDocumentsByQuery, addDocument } from '@iso/lib/firebase/firebase.util';\n\nconst getSelectedChatRoom = state => state.Chat.selectedChatRoom;\n\nconst reverseString = str => str.split('').reverse().join('');\n\nconst sortChatrooms = (optionA, optionB) => optionB.lastMessageTime - optionA.lastMessageTime;\n\nconst sortMessages = (optionA, optionB) => optionA.messageTime - optionB.messageTime;\n\nconst getCurrentUser = () => {\n  return {\n    userId: 'wt4TiasxgPrQ3dNwVZ55',\n    user: {\n      id: 'wt4TiasxgPrQ3dNwVZ55',\n      dob: '06-Apr-1993',\n      gender: 'Male',\n      language: 'Burmese',\n      mobileNo: '5726784596',\n      name: 'Zondra Kulic',\n      profileImageUrl: 'https://s3.amazonaws.com/redqteam.com/mateadmin/support-male-zonra.png'\n    }\n  };\n};\n\nlet chatroomsUserCollections;\nlet chatroomCollectionRef = db.collection('chatRooms');\nlet messagesCollectionRef = db.collection('messages');\n\nconst sendMessageBatch = async ({\n  payload,\n  selectedChatRoom\n}) => {\n  const batch = db.batch(); // const { chatRoom, text } = payload;\n\n  console.log(selectedChatRoom, payload, 'send');\n  const revId = reverseString(selectedChatRoom.id);\n  const messageTime = new Date().getTime();\n  const chatRoomModified = {\n    lastMessage: payload,\n    lastMessageTime: messageTime\n  };\n  batch.update(chatroomCollectionRef.doc(selectedChatRoom.id), chatRoomModified);\n  batch.update(chatroomCollectionRef.doc(revId), chatRoomModified);\n  batch.set(messagesCollectionRef.doc(), {\n    sender: selectedChatRoom.userId,\n    text: payload,\n    messageTime,\n    chatRoomId: selectedChatRoom.id\n  });\n  batch.commit(); // yield fork(updateChatrooms);\n};\n\nfunction* initChat(action) {\n  // console.log(payload, 'chatinit');\n  const payload = getCurrentUser();\n  const users = yield call(getDocuments, 'users');\n  const chatRooms = yield call(getDocumentsByQuery, 'chatRooms', ['userId', '==', payload.userId]);\n  chatRooms.sort(sortChatrooms);\n  const messages = yield call(getDocumentsByQuery, 'messages', ['chatRoomId', '==', chatRooms[0].id]);\n  console.log(chatRooms, 'chatRooms');\n  messages.sort(sortMessages); // fsProps.selectedChatRoom = chatRooms.length > 0 && chatRooms[0];\n\n  chatroomsUserCollections = db.collection('chatRooms').where('userId', '==', payload.userId);\n  yield fork(updateChatrooms);\n  yield put({\n    type: actions.CHAT_INIT_SAGA,\n    user: payload.user,\n    userId: payload.userId,\n    users,\n    chatRooms,\n    messages\n  });\n}\n\nfunction* sendMessage({\n  payload\n}) {\n  // fsProps.selectedChatRoom = payload.chatRoom;\n  const selectedChatRoom = yield select(getSelectedChatRoom);\n  yield call(sendMessageBatch, {\n    payload,\n    selectedChatRoom\n  });\n  yield put({\n    type: actions.NEW_MESSAGE_SUCCESFULL\n  }); // yield fork(updateChatrooms);\n}\n\nfunction* addNewUser({\n  user,\n  addNewUsersProp\n}) {\n  const newUserId = yield call(addDocument, 'users', addNewUsersProp);\n\n  const newUser = _objectSpread({\n    id: newUserId\n  }, addNewUsersProp);\n\n  const newChatroom = {\n    reverse: false,\n    userId: user.id,\n    otherUserId: newUserId,\n    otherUserInfo: newUser,\n    lastMessage: '',\n    lastMessageTime: 0\n  };\n  const newChatRoomId = yield call(addDocument, 'chatRooms', newChatroom);\n  const chatRoomKeyRev = reverseString(newChatRoomId);\n  const newChatroomRev = {\n    id: chatRoomKeyRev,\n    reverse: true,\n    userId: newUserId,\n    otherUserId: user.id,\n    otherUserInfo: user,\n    lastMessage: '',\n    lastMessageTime: 0\n  };\n  yield call(addDocument, 'chatRooms', newChatroomRev);\n  yield put({\n    type: actions.ADD_NEW_USER_SAGA,\n    user: newUser,\n    chatRoom: _objectSpread({\n      id: newChatRoomId\n    }, newChatroom)\n  });\n}\n\nfunction* updateChatrooms() {\n  const successActionCreator = data => {\n    const {\n      type,\n      newIndex\n    } = data.docChanges()[0];\n    const dataMoodified = type === 'modified';\n\n    if (!dataMoodified) {\n      return {\n        type: 'NO_CHANGE'\n      };\n    }\n\n    const chatRoom = data.docs[newIndex].data();\n    return {\n      type: actions.CHAT_UPDATE_CHATROOM_SAGA,\n      payload: {\n        chatRoom\n      }\n    };\n  };\n\n  yield call(rsf.firestore.syncCollection, chatroomsUserCollections, {\n    successActionCreator\n  });\n}\n\nfunction* updateChatroomSaga({\n  payload\n}) {\n  const {\n    chatRoom\n  } = payload;\n  let {\n    selected\n  } = payload;\n  const selectedChatRoom = yield select(getSelectedChatRoom);\n  let messages;\n\n  if (selected || chatRoom.id === selectedChatRoom.id) {\n    messages = yield call(getDocumentsByQuery, 'messages', ['chatRoomId', '==', chatRoom.id]);\n    selected = true;\n  }\n\n  yield put({\n    type: actions.CHAT_UPDATE_CHATROOM,\n    chatRoom,\n    messages,\n    selected\n  });\n}\n\nexport default function* rootSaga() {\n  yield all([takeEvery(actions.CHAT_INIT, initChat), takeEvery(actions.CHAT_UPDATE_CHATROOM_SAGA, updateChatroomSaga), takeEvery(actions.CHAT_SEND_MESSAGE, sendMessage), takeEvery(actions.ADD_NEW_USER, addNewUser)]);\n}","map":null,"metadata":{},"sourceType":"module"}