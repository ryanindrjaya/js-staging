{"ast":null,"code":"import _asyncToGenerator from \"/Users/yudiananta/Development/NextJS/ERP Dev/JS Deploy/JS-Deploy/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(searchRequest),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\nimport _regeneratorRuntime from \"/Users/yudiananta/Development/NextJS/ERP Dev/JS Deploy/JS-Deploy/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport { all, takeEvery, put, call } from 'redux-saga/effects';\nimport actions from './actions';\nexport var per_page = 10;\nvar gitSearchApi = \"https://api.github.com/search/repositories?per_page=\".concat(per_page, \"&q=\");\n\nvar onSearchReqeust = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(searcText) {\n    var page,\n        _args = arguments;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            page = _args.length > 1 && _args[1] !== undefined ? _args[1] : 1;\n            _context.next = 3;\n            return fetch(\"\".concat(gitSearchApi).concat(encodeURIComponent(searcText), \"&page=\").concat(page)).then(function (res) {\n              return res.json();\n            }).then(function (res) {\n              return res;\n            })[\"catch\"](function (error) {\n              return error;\n            });\n\n          case 3:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function onSearchReqeust(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nfunction searchRequest(_ref2) {\n  var payload, searcText, page, searchResult;\n  return _regeneratorRuntime.wrap(function searchRequest$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          payload = _ref2.payload;\n          searcText = payload.searcText, page = payload.page;\n          _context2.prev = 2;\n          _context2.next = 5;\n          return call(onSearchReqeust, searcText, page);\n\n        case 5:\n          searchResult = _context2.sent;\n\n          if (!(searchResult.items && searchResult.total_count)) {\n            _context2.next = 11;\n            break;\n          }\n\n          _context2.next = 9;\n          return put(actions.gitSearchSuccess(searchResult.items, searchResult.total_count, page));\n\n        case 9:\n          _context2.next = 13;\n          break;\n\n        case 11:\n          _context2.next = 13;\n          return put(actions.gitSearchSuccess());\n\n        case 13:\n          _context2.next = 19;\n          break;\n\n        case 15:\n          _context2.prev = 15;\n          _context2.t0 = _context2[\"catch\"](2);\n          _context2.next = 19;\n          return put(actions.gitSearchSuccess());\n\n        case 19:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked, null, [[2, 15]]);\n}\n\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([takeEvery(actions.GIT_SEARCH, searchRequest)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked2);\n}","map":null,"metadata":{},"sourceType":"module"}