{"ast":null,"code":"import _asyncToGenerator from \"/Users/yudiananta/Development/NextJS/ERP Dev/JS Deploy/ERP-Sejati/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"/Users/yudiananta/Development/NextJS/ERP Dev/JS Deploy/ERP-Sejati/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"/Users/yudiananta/Development/NextJS/ERP Dev/JS Deploy/ERP-Sejati/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport createSagaMiddleware, { END } from \"redux-saga\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./root-reducer\";\nimport rootSaga from \"./root-saga\";\nvar sagaMiddleware = createSagaMiddleware();\n\nvar bindMiddleware = function bindMiddleware(middleware) {\n  if (false) {\n    var _require = require(\"redux-devtools-extension\"),\n        composeWithDevTools = _require.composeWithDevTools;\n\n    return composeWithDevTools(applyMiddleware.apply(void 0, _toConsumableArray(middleware)));\n  }\n\n  return applyMiddleware.apply(void 0, _toConsumableArray(middleware));\n};\n\nfunction configureStore() {\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var store = createStore(rootReducer, initialState, bindMiddleware([thunk, sagaMiddleware]));\n\n  store.runSaga = function () {\n    // Avoid running twice\n    if (store.saga) return;\n    store.saga = sagaMiddleware.run(rootSaga);\n  };\n\n  store.stopSaga = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (store.saga) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 2:\n            store.dispatch(END);\n            _context.next = 5;\n            return store.saga.done;\n\n          case 5:\n            store.saga = null;\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  store.execSagaTasks = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(isServer, tasks) {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              // run saga\n              store.runSaga(); // dispatch saga tasks\n\n              tasks(store.dispatch); // Stop running and wait for the tasks to be done\n\n              _context2.next = 4;\n              return store.stopSaga();\n\n            case 4:\n              // Re-run on client side\n              if (!isServer) {\n                store.runSaga();\n              }\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x, _x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }(); // Initial run\n\n\n  store.runSaga();\n  return store;\n}\n\nexport default configureStore;","map":null,"metadata":{},"sourceType":"module"}