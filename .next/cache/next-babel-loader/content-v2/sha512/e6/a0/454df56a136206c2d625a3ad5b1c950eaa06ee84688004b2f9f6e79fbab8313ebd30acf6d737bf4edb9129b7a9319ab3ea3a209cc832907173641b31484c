{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport allBox from './DemoBox';\nimport boxActions from './actions';\n\nconst generateLayout = () => {\n  let y = -2;\n  const h = 2;\n  const w = 48;\n  allBox.map((box, index) => {\n    let temp = {};\n    temp.lg = {\n      x: index % 2 === 0 ? 0 : 48,\n      y: y + h,\n      h,\n      w,\n      i: box.uid.toString()\n    };\n    temp.md = {\n      x: index % 2 === 0 ? 0 : 48,\n      y: y + h,\n      h,\n      w,\n      i: box.uid.toString()\n    };\n    temp.sm = {\n      x: index % 2 === 0 ? 0 : 48,\n      y: y + h,\n      h,\n      w,\n      i: box.uid.toString()\n    };\n    temp.xs = {\n      x: index % 2 === 0 ? 0 : 48,\n      y: y + h,\n      h,\n      w,\n      i: box.uid.toString()\n    };\n    temp.xxs = {\n      x: index % 2 === 0 ? 0 : 48,\n      y: y + h,\n      h,\n      w,\n      i: box.uid.toString()\n    };\n    allBox[index].size = temp;\n    return null;\n  });\n  return allBox;\n};\n\nconst initState = {\n  allBox: generateLayout(),\n  reload: false\n};\nexport default function boxReducer(state = initState, action) {\n  const {\n    allBox\n  } = state;\n\n  switch (action.type) {\n    case boxActions.DELETE_BOX:\n      let tempAllBox = [];\n      allBox.map(box => {\n        if (box.uid.toString() !== action.uid.toString()) {\n          tempAllBox.push(box);\n        }\n\n        return null;\n      });\n      return _objectSpread(_objectSpread({}, state), {}, {\n        allBox: tempAllBox,\n        reload: true\n      });\n\n    case boxActions.SAVE_BOX:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        reload: false,\n        allBox: action.box\n      });\n\n    default:\n      return state;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}