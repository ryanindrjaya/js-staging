{"ast":null,"code":"import _toConsumableArray from \"/Users/yudiananta/Development/NextJS/ERP Dev/JS Deploy/JS-Deploy/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"/Users/yudiananta/Development/NextJS/ERP Dev/JS Deploy/JS-Deploy/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport _regeneratorRuntime from \"/Users/yudiananta/Development/NextJS/ERP Dev/JS Deploy/JS-Deploy/node_modules/next/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(boardsRenderEffectSaga),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(boardRenderEffectSaga),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(createOrUpdateBoardEffectSaga),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(deleteBoardEffectSaga),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(createOrUpdateColumnEffectSaga),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(deleteColumnEffectSaga),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(moveColumnEffectSaga),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(createOrUpdateTaskEffectSaga),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(deleteTaskEffectSaga),\n    _marked10 = /*#__PURE__*/_regeneratorRuntime.mark(moveTaskEffectSaga),\n    _marked11 = /*#__PURE__*/_regeneratorRuntime.mark(scrumBoardSaga);\n\n// saga.js\nimport { all, takeEvery, put, select } from 'redux-saga/effects';\nimport scrumBoardActions from './actions';\nimport DemoData from './data';\nimport { loadState, saveState } from '@iso/lib/helpers/localStorage';\n\nvar getScrumBoards = function getScrumBoards(state) {\n  return state.scrumBoard;\n};\n\nfunction boardsRenderEffectSaga() {\n  var boards, columns, tasks, scrum_boards;\n  return _regeneratorRuntime.wrap(function boardsRenderEffectSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (localStorage.hasOwnProperty('scrum_boards')) {\n            scrum_boards = loadState('scrum_boards');\n            boards = scrum_boards.boards;\n            columns = scrum_boards.columns;\n            tasks = scrum_boards.tasks;\n          } else {\n            boards = DemoData.boards;\n            columns = DemoData.columns;\n            tasks = DemoData.tasks;\n          }\n\n          saveState('scrum_boards', {\n            boards: boards,\n            columns: columns,\n            tasks: tasks\n          });\n          _context.next = 4;\n          return put(scrumBoardActions.setBoardsData({\n            boards: boards,\n            columns: columns,\n            tasks: tasks\n          }));\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction boardRenderEffectSaga(_ref) {\n  var payload, scrum_boards, boards, columns, tasks;\n  return _regeneratorRuntime.wrap(function boardRenderEffectSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          payload = _ref.payload;\n\n          if (localStorage.hasOwnProperty('scrum_boards')) {\n            scrum_boards = loadState('scrum_boards');\n            boards = scrum_boards.boards;\n            columns = scrum_boards.columns;\n            tasks = scrum_boards.tasks;\n          } else {\n            scrum_boards = DemoData;\n            boards = DemoData.boards;\n            columns = DemoData.columns;\n            tasks = DemoData.tasks;\n          }\n\n          _context2.next = 4;\n          return put(scrumBoardActions.setBoardData({\n            boards: boards,\n            columns: columns,\n            tasks: tasks\n          }));\n\n        case 4:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction createOrUpdateBoardEffectSaga(action) {\n  var scrum_boards, boards;\n  return _regeneratorRuntime.wrap(function createOrUpdateBoardEffectSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return select(getScrumBoards);\n\n        case 2:\n          scrum_boards = _context3.sent;\n          boards = _objectSpread(_objectSpread({}, scrum_boards.boards), {}, _defineProperty({}, action.payload.id, action.payload));\n          scrum_boards = {\n            columns: scrum_boards.columns,\n            tasks: scrum_boards.tasks,\n            boards: boards\n          };\n          saveState('scrum_boards', scrum_boards);\n          _context3.next = 8;\n          return put(scrumBoardActions.createOrUpdateBoard(boards));\n\n        case 8:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction deleteBoardEffectSaga(action) {\n  var scrum_boards, BOARDS, boards;\n  return _regeneratorRuntime.wrap(function deleteBoardEffectSaga$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return select(getScrumBoards);\n\n        case 2:\n          scrum_boards = _context4.sent;\n          BOARDS = _objectSpread({}, scrum_boards.boards);\n          delete BOARDS[action.payload];\n          boards = BOARDS;\n          scrum_boards = _objectSpread(_objectSpread({}, scrum_boards), {}, {\n            boards: boards\n          });\n          saveState('scrum_boards', scrum_boards);\n          _context4.next = 10;\n          return put(scrumBoardActions.deleteBoard(boards));\n\n        case 10:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction createOrUpdateColumnEffectSaga(_ref2) {\n  var _ref2$payload, column, board_id, scrum_boards, columns, boards;\n\n  return _regeneratorRuntime.wrap(function createOrUpdateColumnEffectSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _ref2$payload = _ref2.payload, column = _ref2$payload.column, board_id = _ref2$payload.board_id;\n          _context5.next = 3;\n          return select(getScrumBoards);\n\n        case 3:\n          scrum_boards = _context5.sent;\n          console.log(column, board_id);\n          columns = _objectSpread(_objectSpread({}, scrum_boards.columns), {}, _defineProperty({}, column.id, _objectSpread(_objectSpread({}, column), {}, {\n            editing: false\n          })));\n          boards = scrum_boards.boards;\n\n          if (!column.editing) {\n            boards = _objectSpread(_objectSpread({}, scrum_boards.boards), {}, _defineProperty({}, board_id, _objectSpread(_objectSpread({}, scrum_boards.boards[board_id]), {}, {\n              column_orders: [].concat(_toConsumableArray(scrum_boards.boards[board_id].column_orders), [column.id])\n            })));\n          }\n\n          scrum_boards = _objectSpread(_objectSpread({}, scrum_boards), {}, {\n            columns: columns,\n            boards: boards\n          });\n          saveState('scrum_boards', scrum_boards);\n          _context5.next = 12;\n          return put(scrumBoardActions.createOrUpdateColumn({\n            columns: columns,\n            boards: boards\n          }));\n\n        case 12:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nfunction deleteColumnEffectSaga(_ref3) {\n  var _ref3$payload, column_id, board_id, scrum_boards, COLUMNS, columns, boards;\n\n  return _regeneratorRuntime.wrap(function deleteColumnEffectSaga$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _ref3$payload = _ref3.payload, column_id = _ref3$payload.column_id, board_id = _ref3$payload.board_id;\n          _context6.next = 3;\n          return select(getScrumBoards);\n\n        case 3:\n          scrum_boards = _context6.sent;\n          COLUMNS = _objectSpread({}, scrum_boards.columns);\n          delete COLUMNS[column_id];\n          columns = COLUMNS;\n          boards = _objectSpread(_objectSpread({}, scrum_boards.boards), {}, _defineProperty({}, board_id, _objectSpread(_objectSpread({}, scrum_boards.boards[board_id]), {}, {\n            column_orders: scrum_boards.boards[board_id].column_orders.filter(function (order) {\n              return order !== column_id;\n            })\n          })));\n          scrum_boards = _objectSpread(_objectSpread({}, scrum_boards), {}, {\n            columns: columns,\n            boards: boards\n          });\n          saveState('scrum_boards', scrum_boards);\n          _context6.next = 12;\n          return put(scrumBoardActions.deleteColumn({\n            columns: columns,\n            boards: boards\n          }));\n\n        case 12:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nfunction moveColumnEffectSaga(_ref4) {\n  var _ref4$payload, board_id, column_orders, scrum_boards, boards;\n\n  return _regeneratorRuntime.wrap(function moveColumnEffectSaga$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _ref4$payload = _ref4.payload, board_id = _ref4$payload.board_id, column_orders = _ref4$payload.column_orders;\n          _context7.next = 3;\n          return select(getScrumBoards);\n\n        case 3:\n          scrum_boards = _context7.sent;\n          boards = _objectSpread(_objectSpread({}, scrum_boards.boards), {}, _defineProperty({}, board_id, _objectSpread(_objectSpread({}, scrum_boards.boards[board_id]), {}, {\n            column_orders: column_orders\n          })));\n          scrum_boards = _objectSpread(_objectSpread({}, scrum_boards), {}, {\n            boards: boards\n          });\n          saveState('scrum_boards', scrum_boards);\n          _context7.next = 9;\n          return put(scrumBoardActions.setMovedColumn(boards));\n\n        case 9:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}\n\nfunction createOrUpdateTaskEffectSaga(action) {\n  var scrum_boards, tasks, columns;\n  return _regeneratorRuntime.wrap(function createOrUpdateTaskEffectSaga$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return select(getScrumBoards);\n\n        case 2:\n          scrum_boards = _context8.sent;\n          tasks = _objectSpread(_objectSpread({}, scrum_boards.tasks), {}, _defineProperty({}, action.payload.id, _objectSpread(_objectSpread({}, action.payload), {}, {\n            editing: false\n          })));\n          columns = scrum_boards.columns;\n\n          if (!action.payload.editing) {\n            columns = _objectSpread(_objectSpread({}, scrum_boards.columns), {}, _defineProperty({}, action.payload.column_id, _objectSpread(_objectSpread({}, scrum_boards.columns[action.payload.column_id]), {}, {\n              task_orders: [].concat(_toConsumableArray(scrum_boards.columns[action.payload.column_id].task_orders), [action.payload.id])\n            })));\n          }\n\n          scrum_boards = {\n            columns: columns,\n            tasks: tasks,\n            boards: scrum_boards.boards\n          };\n          saveState('scrum_boards', scrum_boards);\n          _context8.next = 10;\n          return put(scrumBoardActions.createOrUpdateTask({\n            tasks: tasks,\n            columns: columns\n          }));\n\n        case 10:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}\n\nfunction deleteTaskEffectSaga(_ref5) {\n  var _ref5$payload, task_id, column_id, scrum_boards, tasks, columns;\n\n  return _regeneratorRuntime.wrap(function deleteTaskEffectSaga$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _ref5$payload = _ref5.payload, task_id = _ref5$payload.task_id, column_id = _ref5$payload.column_id;\n          _context9.next = 3;\n          return select(getScrumBoards);\n\n        case 3:\n          scrum_boards = _context9.sent;\n          tasks = Object.keys(scrum_boards.tasks).reduce(function (object, key) {\n            if (key !== task_id) {\n              object[key] = scrum_boards.tasks[key];\n            }\n\n            return object;\n          }, {});\n          columns = _objectSpread(_objectSpread({}, scrum_boards.columns), {}, _defineProperty({}, column_id, _objectSpread(_objectSpread({}, scrum_boards.columns[column_id]), {}, {\n            task_orders: scrum_boards.columns[column_id].task_orders.filter(function (order) {\n              return order !== task_id;\n            })\n          })));\n          scrum_boards = {\n            columns: columns,\n            tasks: tasks,\n            boards: scrum_boards.boards\n          };\n          saveState('scrum_boards', scrum_boards);\n          _context9.next = 10;\n          return put(scrumBoardActions.deleteTask({\n            columns: columns,\n            tasks: tasks\n          }));\n\n        case 10:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9);\n}\n\nfunction moveTaskEffectSaga(_ref6) {\n  var _ref6$payload, tasks, columns, scrum_boards;\n\n  return _regeneratorRuntime.wrap(function moveTaskEffectSaga$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _ref6$payload = _ref6.payload, tasks = _ref6$payload.tasks, columns = _ref6$payload.columns;\n          _context10.next = 3;\n          return select(getScrumBoards);\n\n        case 3:\n          scrum_boards = _context10.sent;\n          scrum_boards = {\n            columns: columns,\n            tasks: tasks,\n            boards: scrum_boards.boards\n          };\n          saveState('scrum_boards', scrum_boards);\n          _context10.next = 8;\n          return put(scrumBoardActions.setMovedTask({\n            columns: columns,\n            tasks: tasks\n          }));\n\n        case 8:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked10);\n}\n\nexport default function scrumBoardSaga() {\n  return _regeneratorRuntime.wrap(function scrumBoardSaga$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.next = 2;\n          return all([takeEvery(scrumBoardActions.LOAD_BOARDS_DATA_SAGA, boardsRenderEffectSaga), takeEvery(scrumBoardActions.LOAD_CURRENT_BOARD_DATA_SAGA, boardRenderEffectSaga), takeEvery(scrumBoardActions.CREATE_OR_UPDATE_BOARD_WATCHER, createOrUpdateBoardEffectSaga), takeEvery(scrumBoardActions.DELETE_BOARD_WATCHER, deleteBoardEffectSaga), takeEvery(scrumBoardActions.CREATE_OR_UPDATE_COLUMN_WATCHER, createOrUpdateColumnEffectSaga), takeEvery(scrumBoardActions.DELETE_COLUMN_WATCHER, deleteColumnEffectSaga), takeEvery(scrumBoardActions.MOVE_COLUMN_WATCHER, moveColumnEffectSaga), takeEvery(scrumBoardActions.CREATE_OR_UPDATE_TASK_WATCHER, createOrUpdateTaskEffectSaga), takeEvery(scrumBoardActions.DELETE_TASK_WATCHER, deleteTaskEffectSaga), takeEvery(scrumBoardActions.MOVE_TASK_WATCHER, moveTaskEffectSaga)]);\n\n        case 2:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked11);\n}","map":null,"metadata":{},"sourceType":"module"}