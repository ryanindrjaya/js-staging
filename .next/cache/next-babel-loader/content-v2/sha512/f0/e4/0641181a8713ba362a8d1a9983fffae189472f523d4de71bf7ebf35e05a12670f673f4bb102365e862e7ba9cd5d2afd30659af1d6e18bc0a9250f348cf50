{"ast":null,"code":"import _defineProperty from \"/Users/yudiananta/Development/NextJS/ERP Dev/JS Deploy/ERP-Sejati/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"/Users/yudiananta/Development/NextJS/ERP Dev/JS Deploy/ERP-Sejati/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(initChat),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(sendMessage),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(addNewUser),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(updateChatrooms),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(updateChatroomSaga),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\nimport _regeneratorRuntime from \"/Users/yudiananta/Development/NextJS/ERP Dev/JS Deploy/ERP-Sejati/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport { all, takeEvery, put, call, fork, select } from 'redux-saga/effects';\nimport actions from './actions';\nimport { rsf, db } from '@iso/lib/firebase/firebase';\nimport { getDocuments, getDocumentsByQuery, addDocument } from '@iso/lib/firebase/firebase.util';\n\nvar getSelectedChatRoom = function getSelectedChatRoom(state) {\n  return state.Chat.selectedChatRoom;\n};\n\nvar reverseString = function reverseString(str) {\n  return str.split('').reverse().join('');\n};\n\nvar sortChatrooms = function sortChatrooms(optionA, optionB) {\n  return optionB.lastMessageTime - optionA.lastMessageTime;\n};\n\nvar sortMessages = function sortMessages(optionA, optionB) {\n  return optionA.messageTime - optionB.messageTime;\n};\n\nvar getCurrentUser = function getCurrentUser() {\n  return {\n    userId: 'wt4TiasxgPrQ3dNwVZ55',\n    user: {\n      id: 'wt4TiasxgPrQ3dNwVZ55',\n      dob: '06-Apr-1993',\n      gender: 'Male',\n      language: 'Burmese',\n      mobileNo: '5726784596',\n      name: 'Zondra Kulic',\n      profileImageUrl: 'https://s3.amazonaws.com/redqteam.com/mateadmin/support-male-zonra.png'\n    }\n  };\n};\n\nvar chatroomsUserCollections;\nvar chatroomCollectionRef = db.collection('chatRooms');\nvar messagesCollectionRef = db.collection('messages');\n\nvar sendMessageBatch = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n    var payload, selectedChatRoom, batch, revId, messageTime, chatRoomModified;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            payload = _ref.payload, selectedChatRoom = _ref.selectedChatRoom;\n            batch = db.batch(); // const { chatRoom, text } = payload;\n\n            console.log(selectedChatRoom, payload, 'send');\n            revId = reverseString(selectedChatRoom.id);\n            messageTime = new Date().getTime();\n            chatRoomModified = {\n              lastMessage: payload,\n              lastMessageTime: messageTime\n            };\n            batch.update(chatroomCollectionRef.doc(selectedChatRoom.id), chatRoomModified);\n            batch.update(chatroomCollectionRef.doc(revId), chatRoomModified);\n            batch.set(messagesCollectionRef.doc(), {\n              sender: selectedChatRoom.userId,\n              text: payload,\n              messageTime: messageTime,\n              chatRoomId: selectedChatRoom.id\n            });\n            batch.commit(); // yield fork(updateChatrooms);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function sendMessageBatch(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nfunction initChat(action) {\n  var payload, users, chatRooms, messages;\n  return _regeneratorRuntime.wrap(function initChat$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          // console.log(payload, 'chatinit');\n          payload = getCurrentUser();\n          _context2.next = 3;\n          return call(getDocuments, 'users');\n\n        case 3:\n          users = _context2.sent;\n          _context2.next = 6;\n          return call(getDocumentsByQuery, 'chatRooms', ['userId', '==', payload.userId]);\n\n        case 6:\n          chatRooms = _context2.sent;\n          chatRooms.sort(sortChatrooms);\n          _context2.next = 10;\n          return call(getDocumentsByQuery, 'messages', ['chatRoomId', '==', chatRooms[0].id]);\n\n        case 10:\n          messages = _context2.sent;\n          console.log(chatRooms, 'chatRooms');\n          messages.sort(sortMessages); // fsProps.selectedChatRoom = chatRooms.length > 0 && chatRooms[0];\n\n          chatroomsUserCollections = db.collection('chatRooms').where('userId', '==', payload.userId);\n          _context2.next = 16;\n          return fork(updateChatrooms);\n\n        case 16:\n          _context2.next = 18;\n          return put({\n            type: actions.CHAT_INIT_SAGA,\n            user: payload.user,\n            userId: payload.userId,\n            users: users,\n            chatRooms: chatRooms,\n            messages: messages\n          });\n\n        case 18:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction sendMessage(_ref3) {\n  var payload, selectedChatRoom;\n  return _regeneratorRuntime.wrap(function sendMessage$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          payload = _ref3.payload;\n          _context3.next = 3;\n          return select(getSelectedChatRoom);\n\n        case 3:\n          selectedChatRoom = _context3.sent;\n          _context3.next = 6;\n          return call(sendMessageBatch, {\n            payload: payload,\n            selectedChatRoom: selectedChatRoom\n          });\n\n        case 6:\n          _context3.next = 8;\n          return put({\n            type: actions.NEW_MESSAGE_SUCCESFULL\n          });\n\n        case 8:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction addNewUser(_ref4) {\n  var user, addNewUsersProp, newUserId, newUser, newChatroom, newChatRoomId, chatRoomKeyRev, newChatroomRev;\n  return _regeneratorRuntime.wrap(function addNewUser$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          user = _ref4.user, addNewUsersProp = _ref4.addNewUsersProp;\n          _context4.next = 3;\n          return call(addDocument, 'users', addNewUsersProp);\n\n        case 3:\n          newUserId = _context4.sent;\n          newUser = _objectSpread({\n            id: newUserId\n          }, addNewUsersProp);\n          newChatroom = {\n            reverse: false,\n            userId: user.id,\n            otherUserId: newUserId,\n            otherUserInfo: newUser,\n            lastMessage: '',\n            lastMessageTime: 0\n          };\n          _context4.next = 8;\n          return call(addDocument, 'chatRooms', newChatroom);\n\n        case 8:\n          newChatRoomId = _context4.sent;\n          chatRoomKeyRev = reverseString(newChatRoomId);\n          newChatroomRev = {\n            id: chatRoomKeyRev,\n            reverse: true,\n            userId: newUserId,\n            otherUserId: user.id,\n            otherUserInfo: user,\n            lastMessage: '',\n            lastMessageTime: 0\n          };\n          _context4.next = 13;\n          return call(addDocument, 'chatRooms', newChatroomRev);\n\n        case 13:\n          _context4.next = 15;\n          return put({\n            type: actions.ADD_NEW_USER_SAGA,\n            user: newUser,\n            chatRoom: _objectSpread({\n              id: newChatRoomId\n            }, newChatroom)\n          });\n\n        case 15:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction updateChatrooms() {\n  var successActionCreator;\n  return _regeneratorRuntime.wrap(function updateChatrooms$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          successActionCreator = function successActionCreator(data) {\n            var _data$docChanges$ = data.docChanges()[0],\n                type = _data$docChanges$.type,\n                newIndex = _data$docChanges$.newIndex;\n            var dataMoodified = type === 'modified';\n\n            if (!dataMoodified) {\n              return {\n                type: 'NO_CHANGE'\n              };\n            }\n\n            var chatRoom = data.docs[newIndex].data();\n            return {\n              type: actions.CHAT_UPDATE_CHATROOM_SAGA,\n              payload: {\n                chatRoom: chatRoom\n              }\n            };\n          };\n\n          _context5.next = 3;\n          return call(rsf.firestore.syncCollection, chatroomsUserCollections, {\n            successActionCreator: successActionCreator\n          });\n\n        case 3:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction updateChatroomSaga(_ref5) {\n  var payload, chatRoom, selected, selectedChatRoom, messages;\n  return _regeneratorRuntime.wrap(function updateChatroomSaga$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          payload = _ref5.payload;\n          chatRoom = payload.chatRoom;\n          selected = payload.selected;\n          _context6.next = 5;\n          return select(getSelectedChatRoom);\n\n        case 5:\n          selectedChatRoom = _context6.sent;\n\n          if (!(selected || chatRoom.id === selectedChatRoom.id)) {\n            _context6.next = 11;\n            break;\n          }\n\n          _context6.next = 9;\n          return call(getDocumentsByQuery, 'messages', ['chatRoomId', '==', chatRoom.id]);\n\n        case 9:\n          messages = _context6.sent;\n          selected = true;\n\n        case 11:\n          _context6.next = 13;\n          return put({\n            type: actions.CHAT_UPDATE_CHATROOM,\n            chatRoom: chatRoom,\n            messages: messages,\n            selected: selected\n          });\n\n        case 13:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked5);\n}\n\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return all([takeEvery(actions.CHAT_INIT, initChat), takeEvery(actions.CHAT_UPDATE_CHATROOM_SAGA, updateChatroomSaga), takeEvery(actions.CHAT_SEND_MESSAGE, sendMessage), takeEvery(actions.ADD_NEW_USER, addNewUser)]);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked6);\n}","map":null,"metadata":{},"sourceType":"module"}