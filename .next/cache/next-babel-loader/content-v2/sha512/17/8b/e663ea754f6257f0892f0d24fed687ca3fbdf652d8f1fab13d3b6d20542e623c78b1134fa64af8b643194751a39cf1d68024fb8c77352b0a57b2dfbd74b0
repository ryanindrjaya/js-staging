{"ast":null,"code":"import _Alert from \"antd/lib/alert\";\nimport _Spin from \"antd/lib/spin\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useRouter } from \"next/router\";\nimport Input from \"@iso/components/uielements/input\";\nimport Button from \"@iso/components/uielements/button\";\nimport IntlMessages from \"@iso/components/utility/intlMessages\";\nimport authActions from \"../authentication/actions\";\nimport SignInStyleWrapper from \"../styled/SignIn.styles\";\nimport nookies from \"nookies\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst {\n  login\n} = authActions;\nexport default function SignInPage(props) {\n  const dispatch = useDispatch();\n  const router = useRouter();\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: failedLogin,\n    1: setFailedLogin\n  } = useState(false);\n  const {\n    0: failedLoginMsg,\n    1: setfailedLoginMsg\n  } = useState(\"Username atau Password salah\");\n  const {\n    0: field,\n    1: setField\n  } = useState({});\n\n  const handleLogin = async e => {\n    e.preventDefault();\n    setFailedLogin(false);\n    setLoading(true);\n    const credentials = {\n      identifier: field.username,\n      password: field.password\n    };\n    const JSONdata = JSON.stringify(credentials);\n    const endpoint = process.env.NEXT_PUBLIC_URL + \"/auth/local\";\n    const options = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSONdata\n    };\n\n    try {\n      const req = await fetch(endpoint, options);\n      const res = await req.json();\n\n      if (res.jwt) {\n        // set new token\n        nookies.set(null, \"token\", res.jwt, {\n          maxAge: 30 * 24 * 60 * 60,\n          path: \"/\",\n          secure: process.env.NEXT_PUBLIC_URL !== \"development\",\n          sameSite: \"strict\"\n        });\n        const role = await getUserInformation(res.jwt); // set role token\n\n        nookies.set(null, \"role\", role, {\n          maxAge: 30 * 24 * 60 * 60,\n          path: \"/\",\n          secure: process.env.NEXT_PUBLIC_URL !== \"development\",\n          sameSite: \"strict\"\n        }); // redirect\n\n        router.replace(\"/dashboard\");\n      } else {\n        setFailedLogin(true);\n      }\n    } catch (error) {\n      setFailedLogin(true);\n      setfailedLoginMsg(\"Kesalahan Pada Server. Silahkan cek kembali\");\n    }\n\n    setLoading(false);\n  };\n\n  const getUserInformation = async jwt => {\n    const endpoint = process.env.NEXT_PUBLIC_URL + \"/users/me?populate=role\";\n    const options = {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + jwt\n      }\n    };\n    const req = await fetch(endpoint, options);\n    const res = await req.json();\n    console.log(res);\n    return res;\n  };\n\n  const onClose = e => {\n    console.log(e, \"I was closed.\");\n  };\n\n  function setValue(e) {\n    const target = e.target;\n    const name = target.name;\n    const value = target.value;\n    setField(_objectSpread(_objectSpread({}, field), {}, {\n      [name]: value\n    }));\n  } // =========================== UI ===========================\n\n\n  return /*#__PURE__*/_jsx(SignInStyleWrapper, {\n    className: \"isoSignInPage\",\n    children: /*#__PURE__*/_jsx(\"div\", {\n      className: \"isoLoginContentWrapper\",\n      children: /*#__PURE__*/_jsxs(\"div\", {\n        className: \"isoLoginContent\",\n        children: [/*#__PURE__*/_jsx(\"div\", {\n          className: \"isoLogoWrapper\",\n          children: \"JAYA SEHAT\"\n        }), /*#__PURE__*/_jsxs(\"div\", {\n          className: \"isoSignInForm\",\n          children: [/*#__PURE__*/_jsx(\"div\", {\n            className: \"isoInputWrapper\",\n            children: /*#__PURE__*/_jsx(Input, {\n              onChange: setValue,\n              name: \"username\",\n              id: \"inputUserName\",\n              size: \"large\",\n              placeholder: \"Username\"\n            })\n          }), /*#__PURE__*/_jsx(\"div\", {\n            className: \"isoInputWrapper\",\n            children: /*#__PURE__*/_jsx(Input, {\n              onChange: setValue,\n              id: \"inpuPassword\",\n              size: \"large\",\n              name: \"password\",\n              type: \"password\",\n              placeholder: \"Password\"\n            })\n          }), /*#__PURE__*/_jsx(\"div\", {\n            className: \"isoInputWrapper isoLeftRightComponent\",\n            children: loading ? /*#__PURE__*/_jsx(\"div\", {\n              className: \"center\",\n              children: /*#__PURE__*/_jsx(_Spin, {})\n            }) : /*#__PURE__*/_jsx(Button, {\n              type: \"primary\",\n              onClick: handleLogin,\n              children: /*#__PURE__*/_jsx(IntlMessages, {\n                id: \"page.signInButton\"\n              })\n            })\n          }), failedLogin ? /*#__PURE__*/_jsx(_Alert, {\n            message: \"Login Error\",\n            description: \"Username atau Password salah\",\n            type: \"error\",\n            closable: true,\n            onClose: onClose\n          }) : /*#__PURE__*/_jsx(\"div\", {})]\n        })]\n      })\n    })\n  });\n}","map":null,"metadata":{},"sourceType":"module"}