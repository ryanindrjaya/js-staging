{"ast":null,"code":"import _notification from \"antd/lib/notification\";\nimport React from \"react\";\nimport nookies from \"nookies\";\nimport * as moment from \"moment\";\nconst cookies = nookies.get(null, \"token\");\n\nconst CreateOrder = async (products, grandTotal, totalPrice, values, listId, discPrice, form, router) => {\n  // CLEANING DATA\n  var date = new Date(values.order_date);\n  var newDate = moment.utc(date).utcOffset(7 * 60).format();\n  var orderDate = newDate;\n  const supplier = products.preorderData.data.attributes.supplier.data;\n  const location = products.preorderData.data.attributes.location.data;\n  var tempProductListId = [];\n  listId.forEach(element => {\n    tempProductListId.push({\n      id: element\n    });\n  });\n  var supplierId = {\n    id: parseInt(Number.isNaN(parseInt(values.supplier_id)) ? supplier.id : values.supplier_id)\n  };\n  var locationId = {\n    id: parseInt(Number.isNaN(parseInt(values.location)) ? location.id : values.location)\n  };\n  var purchaseOrderId = {\n    id: values.no_po\n  }; // only in purchasing\n\n  delete values.delivery_date;\n  delete values.order_date;\n  delete values.products;\n  values.price_after_disc = parseInt(discPrice);\n  values.tempo_days = String(values.tempo_days);\n  values.purchasing_details = tempProductListId;\n  values.purchase = purchaseOrderId;\n  values.location = locationId;\n  values.supplier_id = supplierId;\n  values.date_purchasing = orderDate;\n  values.supplier_id = supplierId;\n  values.status_pembayaran = \"Belum Lunas\";\n  values.total_purchasing = grandTotal === 0 ? parseInt(totalPrice) : parseInt(grandTotal);\n  var data = {\n    data: values\n  };\n  const req = await createData(data);\n  const res = await req.json();\n\n  if (req.status === 200) {\n    await putRelationOrder(res.data.id, res.data.attributes, values, form, router);\n  } else {\n    openNotificationWithIcon(\"error\");\n  }\n};\n\nconst createData = async data => {\n  const endpoint = process.env.NEXT_PUBLIC_URL + \"/purchasings\";\n  const JSONdata = JSON.stringify(data);\n  const options = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: \"Bearer \" + cookies.token\n    },\n    body: JSONdata\n  };\n  const req = await fetch(endpoint, options);\n  return req;\n};\n\nconst putRelationOrder = async (id, value, values, form, router) => {\n  const user = await getUserMe();\n  const dataOrder = {\n    data: value\n  };\n  dataOrder.data.supplier = {\n    id: values.supplier_id.id\n  };\n  dataOrder.data.purchasing_details = values.purchasing_details;\n  dataOrder.data.added_by = user.name;\n  dataOrder.data.locations = values.location; // clean object\n\n  for (var key in dataOrder.data) {\n    if (dataOrder.data[key] === null || dataOrder.data[key] === undefined) {\n      delete dataOrder[key];\n    }\n  }\n\n  const JSONdata = JSON.stringify(dataOrder);\n  const endpoint = process.env.NEXT_PUBLIC_URL + \"/purchasings/\" + id;\n  const options = {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: \"Bearer \" + cookies.token\n    },\n    body: JSONdata\n  };\n  const req = await fetch(endpoint, options);\n  const res = await req.json();\n\n  if (req.status === 200) {\n    form.resetFields();\n    router.replace(\"/dashboard/pembelian/pembelian_barang\");\n    openNotificationWithIcon(\"success\");\n  } else {\n    openNotificationWithIcon(\"error\");\n  }\n};\n\nconst getUserMe = async () => {\n  const endpoint = process.env.NEXT_PUBLIC_URL + \"/users/me\";\n  const options = {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: \"Bearer \" + cookies.token\n    }\n  };\n  const req = await fetch(endpoint, options);\n  const res = await req.json();\n  return res;\n};\n\nconst openNotificationWithIcon = type => {\n  if (type === \"error\") {\n    _notification[type]({\n      message: \"Gagal menambahkan data\",\n      description: \"Produk gagal ditambahkan. Silahkan cek NO PO atau kelengkapan data lainnya\"\n    });\n  } else if (type === \"success\") {\n    _notification[type]({\n      message: \"Berhasil menambahkan data\",\n      description: \"Produk berhasil ditambahkan. Silahkan cek pada halaman Pembelian Barang\"\n    });\n  }\n};\n\nexport default CreateOrder;","map":null,"metadata":{},"sourceType":"module"}