{"ast":null,"code":"import _Button from \"antd/lib/button\";\nimport _Spin from \"antd/lib/spin\";\nimport _FileImageOutlined from \"@ant-design/icons/lib/icons/FileImageOutlined\";\nimport _message from \"antd/lib/message\";\nimport _Input from \"antd/lib/input\";\nimport _Upload from \"antd/lib/upload\";\nimport _Form from \"antd/lib/form\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState } from \"react\";\nimport Head from \"next/head\";\nimport LayoutContent from \"@iso/components/utility/layoutContent\";\nimport LayoutWrapper from \"@iso/components/utility/layoutWrapper.js\";\nimport nookies from \"nookies\";\nimport { toast } from \"react-toastify\";\nimport DashboardLayout from \"../../../containers/DashboardLayout/DashboardLayout\";\nimport TitlePage from \"../../../components/TitlePage/TitlePage\";\nimport Categories from \"../../../components/Form/AddProduct/Categories\";\nimport Manufactures from \"../../../components/Form/AddProduct/Manufactures\";\nimport SubCategories from \"../../../components/Form/AddProduct/subCategories\";\nimport Groups from \"../../../components/Form/AddProduct/Groups\";\nimport Locations from \"../../../components/Form/AddProduct/Locations\";\nimport { useRouter } from \"next/router\";\nimport Image from \"next/image\";\nimport UnitTable from \"../../../components/ReactDataTable/Product/UnitsTable\";\nimport setDiskonValue from \"./utility/setDiskonValue\";\nimport setHargaValue from \"./utility/setHargaValue\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nconst Tambah = ({\n  props\n}) => {\n  const {\n    0: image,\n    1: setImage\n  } = useState();\n  const {\n    0: category,\n    1: setCategory\n  } = useState();\n  const {\n    0: uploadedOnce,\n    1: setUploadedOnce\n  } = useState(true);\n  const {\n    0: fileList,\n    1: setFileList\n  } = useState([]);\n\n  const [form] = _Form.useForm();\n\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: firstInput,\n    1: setFirstInputDiskon\n  } = useState(true);\n  const cookies = nookies.get(null, \"token\");\n  const router = useRouter();\n  const {\n    Dragger\n  } = _Upload;\n  const {\n    TextArea\n  } = _Input;\n  const manufactures = props.manufactures;\n  const groups = props.groups;\n  const locations = props.locations;\n  const {\n    0: selectedManufactures,\n    1: setSelectedManufactures\n  } = useState({});\n  const {\n    0: selectedGroups,\n    1: setSelectedGroup\n  } = useState({});\n  const {\n    0: selectLocations,\n    1: setSelectLocation\n  } = useState({});\n  const {\n    0: subCategories,\n    1: setSubCategories\n  } = useState([]);\n  const {\n    0: selectedSubCategory,\n    1: setSelectedSubCategory\n  } = useState();\n\n  const imageLoader = ({\n    src\n  }) => {\n    return process.env.BASE_URL + (image === null || image === void 0 ? void 0 : image.url);\n  };\n\n  const propsDagger = {\n    name: \"files\",\n    multiple: false,\n    fileList: fileList,\n    showUploadList: {\n      showDownloadIcon: false,\n      showRemoveIcon: true\n    },\n\n    onRemove(info) {\n      setUploadedOnce(true);\n      setImage();\n      setFileList([]);\n    },\n\n    async onChange(info) {\n      if (info.fileList.length === 1) {\n        const endpoint = process.env.NEXT_PUBLIC_URL + \"/upload\";\n        const file = info.file.originFileObj;\n        const data = new FormData();\n        data.append(\"files\", file);\n        setFileList(info.fileList);\n        const options = {\n          method: \"POST\",\n          headers: {\n            Authorization: \"Bearer \" + cookies.token\n          },\n          body: data\n        };\n\n        if (uploadedOnce) {\n          setUploadedOnce(false);\n          const req = await fetch(endpoint, options);\n          const res = await req.json();\n\n          if (req.status === 200) {\n            setImage(res[0]);\n\n            _message.success(`${info.file.name} berhasil diupload`);\n          } else {\n            _message.error(`${info.file.name} gagal upload`);\n          }\n        }\n      } else if (info.fileList.length === 0) {\n        _message.info(`Gambar berhasil dihapus`);\n      } else {\n        _message.error(`Hanya dapat menambahkan 1 gambar`);\n      }\n    }\n\n  };\n\n  const onFinish = async values => {\n    var _postRes$data;\n\n    setLoading(true); // if (selectedSubCategory === 0) {\n    //   message.error(\n    //     `Sub Kategori tidak ditemukan pada Induk Kategori. Silahkan cek kembali`\n    //   );\n    // }\n\n    const categoryID = {\n      id: parseInt(values === null || values === void 0 ? void 0 : values.category_id)\n    };\n    const subCategoryID = {\n      id: values === null || values === void 0 ? void 0 : values.subCategories\n    };\n    const manufacturesID = {\n      id: values === null || values === void 0 ? void 0 : values.manufactures\n    };\n    const groupID = {\n      id: values === null || values === void 0 ? void 0 : values.groups\n    };\n    const locationsID = [];\n\n    for (let index = 0; index < values.locations.length; index++) {\n      locationsID.push({\n        id: values.locations[index]\n      });\n    }\n\n    delete values.locations;\n    delete values.category_id;\n    delete values.subCategories;\n    delete values.manufactures;\n    delete values.groups;\n\n    const postData = _objectSpread({}, values);\n\n    const putData = {\n      category: categoryID,\n      sub_category: subCategoryID,\n      manufacture: manufacturesID,\n      group: groupID,\n      locations: locationsID,\n      image: {\n        id: image === null || image === void 0 ? void 0 : image.id\n      }\n    }; // POST DATA\n\n    const postRes = await handlePostData(postData);\n    console.log(postRes); // PUT DATA\n\n    await handlePutData(postRes === null || postRes === void 0 ? void 0 : (_postRes$data = postRes.data) === null || _postRes$data === void 0 ? void 0 : _postRes$data.id, putData);\n    setLoading(false);\n  };\n\n  const handlePostData = async data => {\n    const endpoint = process.env.NEXT_PUBLIC_URL + \"/products\";\n    const dataPost = {\n      data: data\n    };\n    const JSONdata = JSON.stringify(dataPost);\n    const options = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + cookies.token\n      },\n      body: JSONdata\n    };\n    const req = await fetch(endpoint, options);\n    const res = await req.json();\n    return res;\n  };\n\n  const handlePutData = async (id, data) => {\n    const endpoint = process.env.NEXT_PUBLIC_URL + \"/products/\" + id;\n\n    for (const key in data) {\n      if (data[key].id === undefined || data[key].id === NaN) {\n        delete data[key];\n      }\n    }\n\n    console.log(endpoint);\n    const dataPut = {\n      data: data\n    };\n    const JSONdata = JSON.stringify(dataPut);\n    const options = {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + cookies.token\n      },\n      body: JSONdata\n    };\n\n    try {\n      const req = await fetch(endpoint, options);\n      const res = await req.json();\n\n      if (req.status === 200) {\n        setImage();\n        form.resetFields();\n        toast.success(\"Produk berhasil ditambahkan!\", {\n          position: toast.POSITION.TOP_RIGHT\n        });\n        router.reload();\n      } else {\n        var _res$error, _res$error$details;\n\n        res === null || res === void 0 ? void 0 : (_res$error = res.error) === null || _res$error === void 0 ? void 0 : (_res$error$details = _res$error.details) === null || _res$error$details === void 0 ? void 0 : _res$error$details.errors.map(error => {\n          const ErrorMsg = error.path[0];\n          toast.error(ErrorMsg === \"SKU\" ? \"SKU sudah digunakan\" : \"Tidak dapat menambahkan Produk\", {\n            position: toast.POSITION.TOP_RIGHT\n          });\n        });\n      }\n    } catch (error) {\n      toast.error(\"Tidak dapat menambahkan Produk\", {\n        position: toast.POSITION.TOP_RIGHT\n      });\n    }\n  };\n\n  const handleValueChange = (changedValues, allValues) => {\n    const fieldName = Object.keys(changedValues)[0];\n    const unit = fieldName.split(\"_\")[1]; // jika user input unit 2,3,4, dan 5\n\n    if (unit > 1) {\n      setDiskonValue(form, changedValues, allValues, fieldName, firstInput);\n      setHargaValue(form, changedValues, allValues, fieldName, firstInput);\n    }\n  };\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(Head, {\n      children: /*#__PURE__*/_jsx(\"title\", {\n        children: \"Tambahkan Produk\"\n      })\n    }), /*#__PURE__*/_jsx(DashboardLayout, {\n      children: /*#__PURE__*/_jsxs(LayoutWrapper, {\n        style: {},\n        children: [/*#__PURE__*/_jsx(TitlePage, {\n          titleText: \"Tambahkan Produk\"\n        }), /*#__PURE__*/_jsx(LayoutContent, {\n          children: /*#__PURE__*/_jsxs(_Form, {\n            form: form,\n            name: \"add_product\",\n            initialValues: {\n              remember: true\n            },\n            onFinish: onFinish,\n            onValuesChange: handleValueChange,\n            children: [/*#__PURE__*/_jsxs(\"div\", {\n              className: \"flex flex-wrap -mx-3 mb-3\",\n              children: [/*#__PURE__*/_jsxs(\"div\", {\n                className: \"w-full md:w-1/3 px-3 mb-2 md:mb-0\",\n                children: [/*#__PURE__*/_jsx(_Form.Item, {\n                  name: \"name\",\n                  rules: [{\n                    required: true,\n                    message: \"Nama Produk tidak boleh kosong!\"\n                  }],\n                  children: /*#__PURE__*/_jsx(_Input, {\n                    style: {\n                      height: \"40px\"\n                    },\n                    placeholder: \"Nama Produk\"\n                  })\n                }), /*#__PURE__*/_jsx(Categories, {\n                  selectedCategory: category,\n                  onSelectCategory: setCategory,\n                  setSubCategories: setSubCategories,\n                  setSelectedSubCategory: setSelectedSubCategory,\n                  selectedSubCategory: selectedSubCategory\n                }), /*#__PURE__*/_jsx(SubCategories, {\n                  subCategories: subCategories,\n                  onSelect: setSelectedSubCategory,\n                  selectedSubCategory: selectedSubCategory\n                }), /*#__PURE__*/_jsx(_Form.Item, {\n                  name: \"description\",\n                  children: /*#__PURE__*/_jsx(TextArea, {\n                    rows: 4,\n                    placeholder: \"Deskripsi\"\n                  })\n                })]\n              }), /*#__PURE__*/_jsxs(\"div\", {\n                className: \"w-full md:w-1/3 px-3 mb-2 md:mb-0\",\n                children: [/*#__PURE__*/_jsx(Manufactures, {\n                  data: manufactures.data,\n                  onSelect: setSelectedManufactures\n                }), /*#__PURE__*/_jsx(Groups, {\n                  data: groups,\n                  onSelect: setSelectedGroup\n                }), /*#__PURE__*/_jsx(Locations, {\n                  data: locations,\n                  onSelect: setSelectLocation\n                })]\n              }), /*#__PURE__*/_jsx(\"div\", {\n                className: \"w-full md:w-1/3 px-3 mb-2 md:mb-0\",\n                children: /*#__PURE__*/_jsx(Dragger, _objectSpread(_objectSpread({}, propsDagger), {}, {\n                  children: image == null ? /*#__PURE__*/_jsxs(_Fragment, {\n                    children: [/*#__PURE__*/_jsx(\"p\", {\n                      className: \"ant-upload-drag-icon\",\n                      children: /*#__PURE__*/_jsx(_FileImageOutlined, {})\n                    }), /*#__PURE__*/_jsx(\"p\", {\n                      className: \"ant-upload-text\",\n                      children: \"Klik atau tarik gambar ke kotak ini\"\n                    }), /*#__PURE__*/_jsx(\"p\", {\n                      className: \"ant-upload-hint  m-3\",\n                      children: \"Gambar akan digunakan sebagai contoh tampilan produk\"\n                    })]\n                  }) : /*#__PURE__*/_jsx(Image, {\n                    layout: \"fill\",\n                    loader: imageLoader,\n                    src: process.env.BASE_URL + (image === null || image === void 0 ? void 0 : image.url)\n                  })\n                }))\n              })]\n            }), /*#__PURE__*/_jsx(\"div\", {\n              children: /*#__PURE__*/_jsx(\"h6\", {\n                className: \"\",\n                children: \"HARGA\"\n              })\n            }), /*#__PURE__*/_jsx(UnitTable, {}), /*#__PURE__*/_jsx(_Form.Item, {\n              className: \"mt-5\",\n              children: loading ? /*#__PURE__*/_jsx(\"div\", {\n                className: \" flex float-left ml-3 \",\n                children: /*#__PURE__*/_jsx(_Spin, {})\n              }) : /*#__PURE__*/_jsx(_Button, {\n                htmlType: \"submit\",\n                className: \" hover:text-white hover:bg-cyan-700 border border-cyan-700 ml-1\",\n                children: \"Simpan\"\n              })\n            })]\n          })\n        })]\n      })\n    })]\n  });\n};\n\nTambah.getInitialProps = async context => {\n  const cookies = nookies.get(context);\n  const reqCategories = await fetchDataCategories(cookies);\n  const categories = await reqCategories.json();\n  const reqGroups = await fetchDataGroups(cookies);\n  const groups = await reqGroups.json();\n  const reqLocations = await fetchDataLocations(cookies);\n  const locations = await reqLocations.json();\n  const reqManufactures = await fetchDataManufactures(cookies);\n  const manufactures = await reqManufactures.json();\n  const reqSubCategories = await fetchDataSubCategories(cookies);\n  const subCategories = await reqSubCategories.json();\n  return {\n    props: {\n      categories,\n      groups,\n      locations,\n      manufactures,\n      subCategories\n    }\n  };\n};\n\nconst fetchDataCategories = async cookies => {\n  const endpoint = process.env.NEXT_PUBLIC_URL + \"/categories\";\n  const options = {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: \"Bearer \" + cookies.token\n    }\n  };\n  const req = await fetch(endpoint, options);\n  return req;\n};\n\nconst fetchDataManufactures = async cookies => {\n  const endpoint = process.env.NEXT_PUBLIC_URL + \"/manufactures\";\n  const options = {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: \"Bearer \" + cookies.token\n    }\n  };\n  const req = await fetch(endpoint, options);\n  return req;\n};\n\nconst fetchDataSubCategories = async cookies => {\n  const endpoint = process.env.NEXT_PUBLIC_URL + \"/sub-categories\";\n  const options = {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: \"Bearer \" + cookies.token\n    }\n  };\n  const req = await fetch(endpoint, options);\n  return req;\n};\n\nconst fetchDataGroups = async cookies => {\n  const endpoint = process.env.NEXT_PUBLIC_URL + \"/groups\";\n  const options = {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: \"Bearer \" + cookies.token\n    }\n  };\n  const req = await fetch(endpoint, options);\n  return req;\n};\n\nconst fetchDataLocations = async cookies => {\n  const endpoint = process.env.NEXT_PUBLIC_URL + \"/locations\";\n  const options = {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: \"Bearer \" + cookies.token\n    }\n  };\n  const req = await fetch(endpoint, options);\n  return req;\n};\n\nexport default Tambah;","map":null,"metadata":{},"sourceType":"module"}