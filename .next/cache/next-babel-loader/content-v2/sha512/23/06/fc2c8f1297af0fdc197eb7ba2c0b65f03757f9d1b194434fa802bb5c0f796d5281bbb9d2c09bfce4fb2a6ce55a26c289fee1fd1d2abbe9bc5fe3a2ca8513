{"ast":null,"code":"import _ConfigProvider from \"antd/lib/config-provider\";\nvar _jsxFileName = \"/Users/yudiananta/Development/NextJS/ERP Dev/JS Deploy/ERP-Sejati/containers/ThemeProvider.js\";\nimport React from 'react';\nimport { IntlProvider } from 'react-intl';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ThemeProvider } from 'styled-components';\nimport themes from '@iso/config/theme/theme.config';\nimport AppLocale from '@iso/config/translation';\nimport useWindowSize from '@iso/lib/hooks/useWindowSize';\nimport appActions from '@iso/redux/app/actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  toggleAll\n} = appActions;\nexport default function AppProvider({\n  children\n}) {\n  const dispatch = useDispatch();\n  const {\n    locale\n  } = useSelector(state => state.LanguageSwitcher.language);\n  const {\n    themeName\n  } = useSelector(state => state.ThemeSwitcher.changeThemes);\n  const currentAppLocale = AppLocale[locale];\n  const {\n    width,\n    height\n  } = useWindowSize();\n  React.useEffect(() => {\n    dispatch(toggleAll(width, height));\n  }, [dispatch]);\n  return /*#__PURE__*/_jsxDEV(_ConfigProvider, {\n    locale: currentAppLocale.antd,\n    children: /*#__PURE__*/_jsxDEV(IntlProvider, {\n      locale: currentAppLocale.locale,\n      messages: currentAppLocale.messages,\n      children: /*#__PURE__*/_jsxDEV(ThemeProvider, {\n        theme: themes[themeName],\n        children: children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/Users/yudiananta/Development/NextJS/ERP Dev/JS Deploy/ERP-Sejati/containers/ThemeProvider.js"],"names":["React","IntlProvider","useSelector","useDispatch","ThemeProvider","themes","AppLocale","useWindowSize","appActions","toggleAll","AppProvider","children","dispatch","locale","state","LanguageSwitcher","language","themeName","ThemeSwitcher","changeThemes","currentAppLocale","width","height","useEffect","antd","messages"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,YAAT,QAA6B,YAA7B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,aAAT,QAA8B,mBAA9B;AACA,OAAOC,MAAP,MAAmB,gCAAnB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,aAAP,MAA0B,8BAA1B;AACA,OAAOC,UAAP,MAAuB,wBAAvB;;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAgBD,UAAtB;AACA,eAAe,SAASE,WAAT,CAAqB;AAAEC,EAAAA;AAAF,CAArB,EAAmC;AAChD,QAAMC,QAAQ,GAAGT,WAAW,EAA5B;AACA,QAAM;AAAEU,IAAAA;AAAF,MAAaX,WAAW,CAACY,KAAK,IAAIA,KAAK,CAACC,gBAAN,CAAuBC,QAAjC,CAA9B;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAgBf,WAAW,CAACY,KAAK,IAAIA,KAAK,CAACI,aAAN,CAAoBC,YAA9B,CAAjC;AACA,QAAMC,gBAAgB,GAAGd,SAAS,CAACO,MAAD,CAAlC;AACA,QAAM;AAAEQ,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAoBf,aAAa,EAAvC;AAEAP,EAAAA,KAAK,CAACuB,SAAN,CAAgB,MAAM;AACpBX,IAAAA,QAAQ,CAACH,SAAS,CAACY,KAAD,EAAQC,MAAR,CAAV,CAAR;AACD,GAFD,EAEG,CAACV,QAAD,CAFH;AAGA,sBACE;AAAgB,IAAA,MAAM,EAAEQ,gBAAgB,CAACI,IAAzC;AAAA,2BACE,QAAC,YAAD;AACE,MAAA,MAAM,EAAEJ,gBAAgB,CAACP,MAD3B;AAEE,MAAA,QAAQ,EAAEO,gBAAgB,CAACK,QAF7B;AAAA,6BAIE,QAAC,aAAD;AAAe,QAAA,KAAK,EAAEpB,MAAM,CAACY,SAAD,CAA5B;AAAA,kBAA0CN;AAA1C;AAAA;AAAA;AAAA;AAAA;AAJF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAUD","sourcesContent":["import React from 'react';\nimport { ConfigProvider } from 'antd';\nimport { IntlProvider } from 'react-intl';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ThemeProvider } from 'styled-components';\nimport themes from '@iso/config/theme/theme.config';\nimport AppLocale from '@iso/config/translation';\nimport useWindowSize from '@iso/lib/hooks/useWindowSize';\nimport appActions from '@iso/redux/app/actions';\n\nconst { toggleAll } = appActions;\nexport default function AppProvider({ children }) {\n  const dispatch = useDispatch();\n  const { locale } = useSelector(state => state.LanguageSwitcher.language);\n  const { themeName } = useSelector(state => state.ThemeSwitcher.changeThemes);\n  const currentAppLocale = AppLocale[locale];\n  const { width, height } = useWindowSize();\n\n  React.useEffect(() => {\n    dispatch(toggleAll(width, height));\n  }, [dispatch]);\n  return (\n    <ConfigProvider locale={currentAppLocale.antd}>\n      <IntlProvider\n        locale={currentAppLocale.locale}\n        messages={currentAppLocale.messages}\n      >\n        <ThemeProvider theme={themes[themeName]}>{children}</ThemeProvider>\n      </IntlProvider>\n    </ConfigProvider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}