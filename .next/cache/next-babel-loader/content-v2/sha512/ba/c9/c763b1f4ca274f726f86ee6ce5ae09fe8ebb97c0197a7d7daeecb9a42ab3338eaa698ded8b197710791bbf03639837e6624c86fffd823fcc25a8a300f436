{"ast":null,"code":"var _jsxFileName = \"/Users/yudiananta/Development/NextJS/ERP Dev/JS Deploy/JS-Deploy/containers/LanguageSwitcher/LanguageSwitcher.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport IntlMessages from '@iso/components/utility/intlMessages';\nimport actions from '@iso/redux/languageSwitcher/actions';\nimport config from './config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar changeLanguage = actions.changeLanguage;\nexport default function LanguageSwitcher() {\n  _s();\n\n  var _this = this;\n\n  var _useSelector = useSelector(function (state) {\n    return state.LanguageSwitcher;\n  }),\n      language = _useSelector.language;\n\n  var dispatch = useDispatch();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"themeSwitchBlock\",\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: /*#__PURE__*/_jsxDEV(IntlMessages, {\n        id: \"languageSwitcher.label\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"themeSwitchBtnWrapper\",\n      children: config.options.map(function (option) {\n        var languageId = option.languageId,\n            icon = option.icon;\n        var customClass = languageId === language.languageId ? 'selectedTheme languageSwitch' : 'languageSwitch';\n        return /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: customClass,\n          onClick: function onClick() {\n            dispatch(changeLanguage(languageId));\n          },\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: icon,\n            alt: \"flag\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 15\n          }, _this)\n        }, languageId, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 13\n        }, _this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }, this);\n}\n\n_s(LanguageSwitcher, \"/+NH3k/bbE/jVo8Fk1e1f7PL68A=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = LanguageSwitcher;\n\nvar _c;\n\n$RefreshReg$(_c, \"LanguageSwitcher\");","map":{"version":3,"sources":["/Users/yudiananta/Development/NextJS/ERP Dev/JS Deploy/JS-Deploy/containers/LanguageSwitcher/LanguageSwitcher.js"],"names":["React","useDispatch","useSelector","IntlMessages","actions","config","changeLanguage","LanguageSwitcher","state","language","dispatch","options","map","option","languageId","icon","customClass"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,YAAP,MAAyB,sCAAzB;AACA,OAAOC,OAAP,MAAoB,qCAApB;AACA,OAAOC,MAAP,MAAmB,UAAnB;;AAEA,IAAQC,cAAR,GAA2BF,OAA3B,CAAQE,cAAR;AAEA,eAAe,SAASC,gBAAT,GAA4B;AAAA;;AAAA;;AACzC,qBAAqBL,WAAW,CAAC,UAAAM,KAAK;AAAA,WAAIA,KAAK,CAACD,gBAAV;AAAA,GAAN,CAAhC;AAAA,MAAQE,QAAR,gBAAQA,QAAR;;AACA,MAAMC,QAAQ,GAAGT,WAAW,EAA5B;AACA,sBACE;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA,4BACE;AAAA,6BACE,QAAC,YAAD;AAAc,QAAA,EAAE,EAAC;AAAjB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAIE;AAAK,MAAA,SAAS,EAAC,uBAAf;AAAA,gBACGI,MAAM,CAACM,OAAP,CAAeC,GAAf,CAAmB,UAAAC,MAAM,EAAI;AAC5B,YAAQC,UAAR,GAA6BD,MAA7B,CAAQC,UAAR;AAAA,YAAoBC,IAApB,GAA6BF,MAA7B,CAAoBE,IAApB;AACA,YAAMC,WAAW,GACfF,UAAU,KAAKL,QAAQ,CAACK,UAAxB,GACI,8BADJ,GAEI,gBAHN;AAKA,4BACE;AACE,UAAA,IAAI,EAAC,QADP;AAEE,UAAA,SAAS,EAAEE,WAFb;AAIE,UAAA,OAAO,EAAE,mBAAM;AACbN,YAAAA,QAAQ,CAACJ,cAAc,CAACQ,UAAD,CAAf,CAAR;AACD,WANH;AAAA,iCAQE;AAAK,YAAA,GAAG,EAAEC,IAAV;AAAgB,YAAA,GAAG,EAAC;AAApB;AAAA;AAAA;AAAA;AAAA;AARF,WAGOD,UAHP;AAAA;AAAA;AAAA;AAAA,iBADF;AAYD,OAnBA;AADH;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA6BD;;GAhCuBP,gB;UACDL,W,EACJD,W;;;KAFKM,gB","sourcesContent":["import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport IntlMessages from '@iso/components/utility/intlMessages';\nimport actions from '@iso/redux/languageSwitcher/actions';\nimport config from './config';\n\nconst { changeLanguage } = actions;\n\nexport default function LanguageSwitcher() {\n  const { language } = useSelector(state => state.LanguageSwitcher);\n  const dispatch = useDispatch();\n  return (\n    <div className=\"themeSwitchBlock\">\n      <h4>\n        <IntlMessages id=\"languageSwitcher.label\" />\n      </h4>\n      <div className=\"themeSwitchBtnWrapper\">\n        {config.options.map(option => {\n          const { languageId, icon } = option;\n          const customClass =\n            languageId === language.languageId\n              ? 'selectedTheme languageSwitch'\n              : 'languageSwitch';\n\n          return (\n            <button\n              type=\"button\"\n              className={customClass}\n              key={languageId}\n              onClick={() => {\n                dispatch(changeLanguage(languageId));\n              }}\n            >\n              <img src={icon} alt=\"flag\" />\n            </button>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}