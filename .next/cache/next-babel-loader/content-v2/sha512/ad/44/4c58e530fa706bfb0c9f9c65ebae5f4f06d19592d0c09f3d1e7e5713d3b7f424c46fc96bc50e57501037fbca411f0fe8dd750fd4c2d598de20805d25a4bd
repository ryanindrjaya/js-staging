{"ast":null,"code":"import React, { useEffect } from \"react\";\nimport { useRouter } from \"next/router\";\nimport nookies from \"nookies\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Middleware({\n  children\n}) {\n  const cookies = nookies.get(null);\n  const token = cookies.token;\n  const router = useRouter();\n  useEffect(async () => {\n    const firstPath = router.pathname.split(\"/\")[1]; // let isValid = await istokenValid(token);\n    // if (!isValid) {\n    //   router.push(\"/\");\n    // } else {\n    // }\n\n    if (firstPath === \"dashboard\" && !token) {\n      router.push(\"/\");\n    } else {\n      if (token && firstPath === \"\") {\n        router.push(\"/dashboard\");\n      }\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: children\n  }, void 0, false);\n}\n\nconst istokenValid = async token => {\n  const endpoint = process.env.NEXT_PUBLIC_URL + `/products`;\n  const options = {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: \"Bearer \" + token\n    }\n  };\n  const req = await fetch(endpoint, options);\n  const res = await req.json();\n\n  if (req.status === 401) {\n    return false;\n  } else {\n    return true;\n  }\n};\n\nexport default Middleware;","map":{"version":3,"sources":["/Users/yudiananta/Development/NextJS/ERP Dev/JS Deploy/JS-Deploy/components/Middleware.js"],"names":["React","useEffect","useRouter","nookies","Middleware","children","cookies","get","token","router","firstPath","pathname","split","push","istokenValid","endpoint","process","env","NEXT_PUBLIC_URL","options","method","headers","Authorization","req","fetch","res","json","status"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,OAAP,MAAoB,SAApB;;;;AAEA,SAASC,UAAT,CAAoB;AAAEC,EAAAA;AAAF,CAApB,EAAkC;AAChC,QAAMC,OAAO,GAAGH,OAAO,CAACI,GAAR,CAAY,IAAZ,CAAhB;AACA,QAAMC,KAAK,GAAGF,OAAO,CAACE,KAAtB;AACA,QAAMC,MAAM,GAAGP,SAAS,EAAxB;AAEAD,EAAAA,SAAS,CAAC,YAAY;AACpB,UAAMS,SAAS,GAAGD,MAAM,CAACE,QAAP,CAAgBC,KAAhB,CAAsB,GAAtB,EAA2B,CAA3B,CAAlB,CADoB,CAGpB;AAEA;AACA;AACA;AACA;;AAEA,QAAIF,SAAS,KAAK,WAAd,IAA6B,CAACF,KAAlC,EAAyC;AACvCC,MAAAA,MAAM,CAACI,IAAP,CAAY,GAAZ;AACD,KAFD,MAEO;AACL,UAAIL,KAAK,IAAIE,SAAS,KAAK,EAA3B,EAA+B;AAC7BD,QAAAA,MAAM,CAACI,IAAP,CAAY,YAAZ;AACD;AACF;AACF,GAjBQ,EAiBN,EAjBM,CAAT;AAmBA,sBAAO;AAAA,cAAGR;AAAH,mBAAP;AACD;;AAED,MAAMS,YAAY,GAAG,MAAON,KAAP,IAAiB;AACpC,QAAMO,QAAQ,GAAGC,OAAO,CAACC,GAAR,CAAYC,eAAZ,GAA+B,WAAhD;AACA,QAAMC,OAAO,GAAG;AACdC,IAAAA,MAAM,EAAE,KADM;AAEdC,IAAAA,OAAO,EAAE;AACP,sBAAgB,kBADT;AAEPC,MAAAA,aAAa,EAAE,YAAYd;AAFpB;AAFK,GAAhB;AAQA,QAAMe,GAAG,GAAG,MAAMC,KAAK,CAACT,QAAD,EAAWI,OAAX,CAAvB;AACA,QAAMM,GAAG,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAlB;;AACA,MAAIH,GAAG,CAACI,MAAJ,KAAe,GAAnB,EAAwB;AACtB,WAAO,KAAP;AACD,GAFD,MAEO;AACL,WAAO,IAAP;AACD;AACF,CAjBD;;AAmBA,eAAevB,UAAf","sourcesContent":["import React, { useEffect } from \"react\";\nimport { useRouter } from \"next/router\";\nimport nookies from \"nookies\";\n\nfunction Middleware({ children }) {\n  const cookies = nookies.get(null);\n  const token = cookies.token;\n  const router = useRouter();\n\n  useEffect(async () => {\n    const firstPath = router.pathname.split(\"/\")[1];\n\n    // let isValid = await istokenValid(token);\n\n    // if (!isValid) {\n    //   router.push(\"/\");\n    // } else {\n    // }\n\n    if (firstPath === \"dashboard\" && !token) {\n      router.push(\"/\");\n    } else {\n      if (token && firstPath === \"\") {\n        router.push(\"/dashboard\");\n      }\n    }\n  }, []);\n\n  return <>{children}</>;\n}\n\nconst istokenValid = async (token) => {\n  const endpoint = process.env.NEXT_PUBLIC_URL + `/products`;\n  const options = {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: \"Bearer \" + token,\n    },\n  };\n\n  const req = await fetch(endpoint, options);\n  const res = await req.json();\n  if (req.status === 401) {\n    return false;\n  } else {\n    return true;\n  }\n};\n\nexport default Middleware;\n"]},"metadata":{},"sourceType":"module"}