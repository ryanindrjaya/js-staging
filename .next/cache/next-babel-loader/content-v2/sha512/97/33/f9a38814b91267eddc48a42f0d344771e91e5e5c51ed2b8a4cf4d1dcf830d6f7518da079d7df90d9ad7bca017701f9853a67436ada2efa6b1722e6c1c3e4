{"ast":null,"code":"import _Progress from \"antd/lib/progress\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from \"react\";\nimport * as XLSX from \"xlsx\";\nimport { productKeys } from \"./utils/productKeys\";\nimport { getRelationalData, getLocationsId } from \"./utils/getRelationalData\";\nimport nookies from \"nookies\";\nimport { toast } from \"react-toastify\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function UploadProduk({\n  setProduct\n}) {\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: percent,\n    1: setPercent\n  } = useState(0);\n  const {\n    0: error,\n    1: setError\n  } = useState(null);\n  const {\n    0: status,\n    1: setStatus\n  } = useState(\"\");\n  console.log(\"percent\", percent);\n\n  const postData = data => {\n    let increment = 100 / data.length;\n    console.log(\"increment\", increment);\n    const cookies = nookies.get(null);\n    const endpoint = process.env.NEXT_PUBLIC_URL + \"/products\";\n\n    try {\n      data.forEach(async (row, idx) => {\n        const data = {\n          data: row\n        };\n        const options = {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: \"Bearer \" + cookies.token\n          },\n          body: JSON.stringify(data)\n        };\n        console.log(\"options\", options);\n\n        try {\n          const req = await fetch(endpoint, options);\n          const res = await req.json();\n          setPercent(prev => Math.round(prev + increment));\n\n          if (req.status == 200) {\n            const endpointProduct = process.env.NEXT_PUBLIC_URL + \"/products?populate=*\";\n            const optionsAllProduct = {\n              method: \"GET\",\n              headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: \"Bearer \" + cookies.token\n              }\n            };\n            const reqProduct = await fetch(endpointProduct, optionsAllProduct);\n            const resProduct = await reqProduct.json();\n            setProduct(resProduct);\n          }\n        } catch (err) {\n          console.log(err);\n        }\n      });\n    } catch (err) {\n      toast.error(\"Gagal mengunggah data\");\n      setLoading(false);\n    }\n  };\n\n  const convertToJson = async data => {\n    const rows = data.map(async row => {\n      var _rowData, _rowData$category, _rowData2, _rowData2$sub_categor, _rowData3, _rowData3$group, _rowData4, _rowData4$manufacture, _rowData5, _rowData5$locations;\n\n      let rowData = {};\n      row.forEach((element, index) => {\n        rowData[productKeys[index]] = element;\n      });\n\n      if (!rowData.SKU) {\n        return;\n      } // process relational data\n\n\n      const categoryIdRaw = ((_rowData = rowData) === null || _rowData === void 0 ? void 0 : (_rowData$category = _rowData.category) === null || _rowData$category === void 0 ? void 0 : _rowData$category.split(\"-\")[0].trim()) || \"\";\n      const subCategoryIdRaw = ((_rowData2 = rowData) === null || _rowData2 === void 0 ? void 0 : (_rowData2$sub_categor = _rowData2.sub_category) === null || _rowData2$sub_categor === void 0 ? void 0 : _rowData2$sub_categor.split(\"-\")[0].trim()) || \"\";\n      const groupAliasRaw = ((_rowData3 = rowData) === null || _rowData3 === void 0 ? void 0 : (_rowData3$group = _rowData3.group) === null || _rowData3$group === void 0 ? void 0 : _rowData3$group.split(\"-\")[0].trim()) || \"\";\n      const manufactureAliasRaw = ((_rowData4 = rowData) === null || _rowData4 === void 0 ? void 0 : (_rowData4$manufacture = _rowData4.manufacture) === null || _rowData4$manufacture === void 0 ? void 0 : _rowData4$manufacture.split(\"-\")[0].trim()) || \"\";\n      const locationNamesArrRaw = ((_rowData5 = rowData) === null || _rowData5 === void 0 ? void 0 : (_rowData5$locations = _rowData5.locations) === null || _rowData5$locations === void 0 ? void 0 : _rowData5$locations.split(\",\")) || [];\n      const locationsNamesTrimmed = locationNamesArrRaw.map(item => item === null || item === void 0 ? void 0 : item.trim());\n      console.log(\"manufacture alias\", manufactureAliasRaw);\n      const categoryId = await getRelationalData(\"categories\", \"category_id\", categoryIdRaw);\n      const subCategoryId = await getRelationalData(\"sub-categories\", \"sub_id\", subCategoryIdRaw);\n      const groupId = await getRelationalData(\"groups\", \"alias\", groupAliasRaw);\n      const manufactureId = await getRelationalData(\"manufactures\", \"code\", manufactureAliasRaw);\n      const locationsId = await getLocationsId(locationsNamesTrimmed);\n      rowData = _objectSpread(_objectSpread({}, rowData), {}, {\n        category: categoryId,\n        sub_category: subCategoryId,\n        group: groupId,\n        manufacture: manufactureId,\n        locations: locationsId\n      });\n      return rowData;\n    });\n    const resolvedRows = await Promise.all(rows);\n    return resolvedRows;\n  };\n\n  const importExcel = e => {\n    setLoading(true);\n    console.log(e.target.files);\n\n    try {\n      const file = e.target.files[0];\n      const reader = new FileReader();\n\n      reader.onload = async event => {\n        const bstr = event.target.result;\n        const workbook = XLSX.read(bstr, {\n          type: \"binary\"\n        });\n        const workSheetName = workbook.SheetNames[0];\n        const workSheet = workbook.Sheets[workSheetName];\n        const fileData = XLSX.utils.sheet_to_json(workSheet, {\n          header: 1\n        });\n        fileData.splice(0, 2);\n        const rowsData = await convertToJson(fileData);\n        postData(rowsData);\n      };\n\n      reader.readAsBinaryString(file);\n    } catch (err) {\n      setError(\"gagal ges ges\");\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (percent >= 100) {\n      toast.success(\"Berhasil mengunggah data\");\n      setLoading(false);\n      setPercent(0);\n    }\n  }, [percent]);\n  useEffect(() => {\n    if (error !== null) {\n      toast.error(error);\n      setTimeout(() => {\n        setError(null);\n      }, 2000);\n    }\n  }, [error]);\n  return loading ? /*#__PURE__*/_jsx(\"div\", {\n    className: \"flex flex-col items-center justify-center w-full\",\n    children: /*#__PURE__*/_jsx(_Progress, {\n      type: \"circle\",\n      width: 35,\n      percent: percent,\n      status: status\n    })\n  }) : /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(\"label\", {\n      htmlFor: \"upload_file\",\n      className: \"bg-cyan-700 cursor-pointer text-xs font-bold text-white w-full rounded h-10 hover:bg-cyan-800  shadow-sm flex items-center justify-center float-right\",\n      children: \"Upload\"\n    }), /*#__PURE__*/_jsx(\"input\", {\n      onChange: importExcel,\n      type: \"file\",\n      id: \"upload_file\",\n      hidden: true\n    })]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}