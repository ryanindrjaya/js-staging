{"ast":null,"code":"import _Modal from \"antd/lib/modal\";\nimport _Input from \"antd/lib/input\";\nimport Head from \"next/head\";\nimport React, { useEffect, useState } from \"react\";\nimport LayoutContent from \"@iso/components/utility/layoutContent\";\nimport LayoutWrapper from \"@iso/components/utility/layoutWrapper.js\";\nimport { useRouter } from \"next/router\";\nimport { toast } from \"react-toastify\";\nimport nookies from \"nookies\";\nimport DashboardLayout from \"../../../containers/DashboardLayout/DashboardLayout\";\nimport TitlePage from \"../../../components/TitlePage/TitlePage\";\nimport ProductTable from \"../../../components/ReactDataTable/ProductTable\";\nimport ProductModal from \"../../../components/Modal/ProductModal\";\nimport UnitTableView from \"../../../components/ReactDataTable/Product/UnitsTableView\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nconst Product = ({\n  props\n}) => {\n  const data = props.data;\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState(false);\n  const {\n    0: product,\n    1: setProduct\n  } = useState(data);\n  const {\n    0: modalProduct,\n    1: setModalProduct\n  } = useState();\n  const {\n    0: isSearching,\n    1: setIsSearching\n  } = useState(false);\n  const {\n    0: visible,\n    1: setVisible\n  } = useState(false);\n  const router = useRouter();\n  const {\n    0: inventory,\n    1: setInventory\n  } = useState();\n  const {\n    Search\n  } = _Input;\n\n  const onSearch = async e => {\n    if (e.target.value.length >= 2) {\n      setIsSearching(true);\n      const req = await searchQuery(e.target.value);\n      const res = await req.json();\n      setProduct(res);\n      setIsSearching(false);\n    } else {\n      setProduct(data);\n      setIsSearching(false);\n    }\n  };\n\n  const searchQuery = async keywords => {\n    const endpoint = process.env.NEXT_PUBLIC_URL + \"/products?filters[$or][0][name][$contains]=\" + keywords + \"&filters[$or][1][SKU][$contains]=\" + keywords + \"&populate=*\";\n    const cookies = nookies.get(null, \"token\");\n    const options = {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + cookies.token\n      }\n    };\n    const req = await fetch(endpoint, options);\n    return req;\n  };\n\n  const handleAdd = () => {\n    console.log(\"\");\n    router.push(\"/dashboard/produk/tambah\");\n  };\n\n  const handleView = () => {\n    router.push(\"/dashboard/produk/lihat\");\n  };\n\n  const handleUpdate = id => {\n    console.log(\"\");\n    router.push(\"/dashboard/produk/edit/\" + id);\n  };\n\n  const handleDelete = async id => {\n    const endpoint = process.env.NEXT_PUBLIC_URL + \"/products/\" + id;\n    const cookies = nookies.get(null, \"token\");\n    const options = {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + cookies.token\n      }\n    };\n    const req = await fetch(endpoint, options);\n    const res = await req.json();\n\n    if (res) {\n      const req = await fetchData(cookies);\n      const res = await req.json();\n      toast.success(\"Produk berhasil dihapus\");\n      setProduct(res);\n    }\n  };\n\n  const handlePageChange = async page => {\n    const cookies = nookies.get(null, \"token\");\n    const endpoint = process.env.NEXT_PUBLIC_URL + \"/products?pagination[page]=\" + page;\n    const options = {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + cookies.token\n      }\n    };\n\n    try {\n      const req = await fetch(endpoint, options);\n      const res = await req.json();\n\n      if (res) {\n        setProduct(prevData => ({\n          data: filterDuplicateData(prevData.data.concat(res.data)),\n          meta: prevData.meta\n        }));\n      } else {\n        console.log(\"something is wrong\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const filterDuplicateData = arr => {\n    const seen = new Set();\n    const filteredArr = arr.filter(el => {\n      const duplicate = seen.has(el.id);\n      seen.add(el.id);\n      return !duplicate;\n    });\n    return filteredArr;\n  };\n\n  const fetchInventory = async data => {\n    setIsLoading(true);\n    const cookies = nookies.get(null, \"token\");\n    const endpoint = process.env.NEXT_PUBLIC_URL + `/inventories?filters[products][id][$eq]=${data.id}&populate=locations`;\n    const options = {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + cookies.token\n      }\n    };\n    const req = await fetch(endpoint, options);\n    const res = await req.json(); // return req;\n    // console.log(res);\n\n    setInventory(res.data); //\n  };\n\n  const openModal = async (e, data) => {\n    // console.log(\"test\", data);\n    setVisible(e);\n    fetchInventory(data);\n  };\n\n  useEffect(() => {\n    console.log(\"inventory\", inventory);\n    setIsLoading(false);\n  }, [inventory]);\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(Head, {\n      children: /*#__PURE__*/_jsx(\"title\", {\n        children: \"Produk\"\n      })\n    }), /*#__PURE__*/_jsx(DashboardLayout, {\n      children: /*#__PURE__*/_jsxs(LayoutWrapper, {\n        style: {},\n        children: [/*#__PURE__*/_jsx(TitlePage, {\n          titleText: \"Produk\"\n        }), /*#__PURE__*/_jsxs(LayoutContent, {\n          children: [/*#__PURE__*/_jsxs(\"div\", {\n            className: \"w-full flex justify-between\",\n            children: [/*#__PURE__*/_jsx(Search, {\n              className: \"\",\n              loading: isSearching,\n              onChange: e => onSearch(e),\n              placeholder: \"Cari Produk\",\n              style: {\n                width: 200\n              }\n            }), /*#__PURE__*/_jsx(\"button\", {\n              onClick: handleAdd,\n              type: \"button\",\n              className: \"bg-cyan-700 rounded px-5 py-2 hover:bg-cyan-800  shadow-sm flex float-right mb-5\",\n              children: /*#__PURE__*/_jsx(\"div\", {\n                className: \"text-white text-center text-sm font-bold\",\n                children: /*#__PURE__*/_jsx(\"a\", {\n                  className: \"text-white no-underline text-xs sm:text-xs\",\n                  children: \"+ Tambah\"\n                })\n              })\n            })]\n          }), /*#__PURE__*/_jsx(_Modal, {\n            className: \"rounded-lg m-5\",\n            head: true,\n            width: \"90%\",\n            centered: true,\n            visible: visible,\n            onOk: () => setVisible(false),\n            onCancel: () => setVisible(false),\n            bodyStyle: {\n              borderRadius: \"20px\",\n              backgroundColor: \"#fff\"\n            },\n            style: {\n              backgroundColor: \"#fff\"\n            },\n            footer: null,\n            children: /*#__PURE__*/_jsx(ProductModal, {\n              data: modalProduct,\n              isLoading: isLoading,\n              inventory: inventory\n            })\n          }), /*#__PURE__*/_jsx(ProductTable, {\n            data: product,\n            onDelete: handleDelete,\n            onUpdate: handleUpdate,\n            onPageChange: handlePageChange,\n            setIsVisible: openModal,\n            setViewModalProduct: setModalProduct\n          })]\n        })]\n      })\n    })]\n  });\n};\n\nProduct.getInitialProps = async context => {\n  const cookies = nookies.get(context);\n  let data;\n  const req = await fetchData(cookies);\n  data = await req.json();\n  return {\n    props: {\n      data\n    }\n  };\n};\n\nconst fetchData = async cookies => {\n  const endpoint = process.env.NEXT_PUBLIC_URL + \"/products?populate=*\";\n  const options = {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: \"Bearer \" + cookies.token\n    }\n  };\n  const req = await fetch(endpoint, options);\n  return req;\n};\n\nexport default Product;","map":null,"metadata":{},"sourceType":"module"}