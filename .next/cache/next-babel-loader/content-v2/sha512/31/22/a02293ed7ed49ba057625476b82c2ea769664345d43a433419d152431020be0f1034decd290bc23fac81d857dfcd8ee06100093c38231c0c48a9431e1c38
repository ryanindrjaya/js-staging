{"ast":null,"code":"import _Button from \"antd/lib/button\";\nimport _Spin from \"antd/lib/spin\";\nimport _Select from \"antd/lib/select\";\nimport _Input from \"antd/lib/input\";\nimport _Form from \"antd/lib/form\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState } from \"react\";\nimport Head from \"next/head\";\nimport LayoutContent from \"@iso/components/utility/layoutContent\";\nimport LayoutWrapper from \"@iso/components/utility/layoutWrapper.js\";\nimport nookies from \"nookies\";\nimport { toast } from \"react-toastify\";\nimport DashboardLayout from \"../../../../containers/DashboardLayout/DashboardLayout\";\nimport TitlePage from \"../../../../components/TitlePage/TitlePage\";\nimport AsyncSelect from \"react-select/async\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nconst Tambah = ({\n  props\n}) => {\n  var _props$categories;\n\n  const categories = props === null || props === void 0 ? void 0 : (_props$categories = props.categories) === null || _props$categories === void 0 ? void 0 : _props$categories.data;\n  const {\n    0: selectedCategory,\n    1: setSelectedCategory\n  } = useState(\"\");\n\n  const [form] = _Form.useForm();\n\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: data,\n    1: setData\n  } = useState([]);\n  const {\n    0: value,\n    1: setValue\n  } = useState();\n  const cookies = nookies.get(null, \"token\");\n  const {\n    TextArea\n  } = _Input;\n\n  const onFinish = async values => {\n    setLoading(true);\n    const categoryID = {\n      id: value\n    };\n    delete values.category_id;\n\n    const dataValues = _objectSpread(_objectSpread({}, values), {}, {\n      category: categoryID\n    });\n\n    const data = {\n      data: dataValues\n    };\n    const endpoint = process.env.NEXT_PUBLIC_URL + \"/sub-categories\";\n    const JSONdata = JSON.stringify(data);\n    const options = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + cookies.token\n      },\n      body: JSONdata\n    };\n    const req = await fetch(endpoint, options);\n    const res = await req.json();\n\n    if (req.status === 200) {\n      form.resetFields();\n      toast.success(\"Sub Kategori berhasil ditambahkan!\", {\n        position: toast.POSITION.TOP_RIGHT\n      });\n    } else {\n      var _res$error;\n\n      (_res$error = res.error) === null || _res$error === void 0 ? void 0 : _res$error.details.errors.map(error => {\n        const ErrorMsg = error.path[0];\n        toast.error(ErrorMsg === \"sub_id\" ? \"ID Sub Kategori udah digunakan\" : \"Tidak dapat menambahkan Sub Kategori\", {\n          position: toast.POSITION.TOP_RIGHT\n        });\n      });\n    }\n\n    setLoading(false);\n  };\n\n  const fetchCategory = async (query, callback, tindakan) => {\n    if (!query) {\n      callback([]);\n    } else {\n      try {\n        const endpoint = process.env.NEXT_PUBLIC_URL + `/categories?filters[$or][0][name][$contains]=${query}&filters[$or][1][category_id][$contains]=${query}`;\n        const options = {\n          method: \"GET\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: \"Bearer \" + cookies.token\n          }\n        };\n        const req = await fetch(endpoint, options);\n        const res = await req.json();\n\n        if (req.status == 200) {\n          const categoriesResult = res.data.map(categories => ({\n            label: `${categories.attributes.category_id} - ${categories.attributes.name}`,\n            value: categories.id\n          }));\n          console.log(categoriesResult);\n          callback(categoriesResult);\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  };\n\n  const handleSearch = newValue => {\n    if (newValue) {\n      fetchCategory(newValue, setData);\n      console.log(data);\n    } else {\n      setData([]);\n    }\n  };\n\n  const handleChange = newValue => {\n    setValue(newValue);\n  };\n\n  const options = data.map(d => /*#__PURE__*/_jsx(Option, {\n    children: d.label\n  }, d.value));\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(Head, {\n      children: /*#__PURE__*/_jsx(\"title\", {\n        children: \"Tambahkan Sub Kategori\"\n      })\n    }), /*#__PURE__*/_jsx(DashboardLayout, {\n      children: /*#__PURE__*/_jsxs(LayoutWrapper, {\n        style: {},\n        children: [/*#__PURE__*/_jsx(TitlePage, {\n          titleText: \"Tambahkan Sub Kategori\"\n        }), /*#__PURE__*/_jsx(LayoutContent, {\n          children: /*#__PURE__*/_jsxs(_Form, {\n            form: form,\n            name: \"add_category\",\n            initialValues: {\n              remember: true\n            },\n            onFinish: onFinish,\n            children: [/*#__PURE__*/_jsx(\"div\", {\n              className: \"flex flex-wrap -mx-3 mb-6\",\n              children: /*#__PURE__*/_jsx(_Form.Item, {\n                name: \"category_id\",\n                className: \"w-full md:w-1/3 px-3 mb-2 md:mb-0\",\n                children: /*#__PURE__*/_jsx(_Select, {\n                  size: \"large\",\n                  showSearch: true,\n                  value: value,\n                  showArrow: false,\n                  placeholder: \"Pilih Induk Kategori\",\n                  onSearch: handleSearch,\n                  onChange: handleChange,\n                  filterOption: false,\n                  defaultActiveFirstOption: false,\n                  children: options\n                })\n              })\n            }), /*#__PURE__*/_jsxs(\"div\", {\n              className: \"flex flex-wrap -mx-3 mb-6\",\n              children: [/*#__PURE__*/_jsx(\"div\", {\n                className: \"w-full md:w-1/2 px-3 mb-2 md:mb-0\",\n                children: /*#__PURE__*/_jsx(_Form.Item, {\n                  name: \"sub_id\",\n                  rules: [{\n                    required: true,\n                    message: \"Sub ID tidak boleh kosong!\"\n                  }],\n                  children: /*#__PURE__*/_jsx(_Input, {\n                    style: {\n                      height: \"50px\"\n                    },\n                    placeholder: \"Sub ID\"\n                  })\n                })\n              }), /*#__PURE__*/_jsx(\"div\", {\n                className: \"w-full md:w-1/2 px-3 mb-2 md:mb-0\",\n                children: /*#__PURE__*/_jsx(_Form.Item, {\n                  name: \"name\",\n                  rules: [{\n                    required: true,\n                    message: \"Nama Sub tidak boleh kosong!\"\n                  }],\n                  children: /*#__PURE__*/_jsx(_Input, {\n                    style: {\n                      height: \"50px\"\n                    },\n                    placeholder: \"Nama Sub Kategori\"\n                  })\n                })\n              }), /*#__PURE__*/_jsx(\"div\", {\n                className: \"w-full md:w-full px-3 mb-2 md:mb-0\",\n                children: /*#__PURE__*/_jsx(_Form.Item, {\n                  name: \"description\",\n                  children: /*#__PURE__*/_jsx(TextArea, {\n                    rows: 4,\n                    placeholder: \"Deskripsi\"\n                  })\n                })\n              })]\n            }), /*#__PURE__*/_jsx(_Form.Item, {\n              children: loading ? /*#__PURE__*/_jsx(\"div\", {\n                className: \" flex float-left ml-3\",\n                children: /*#__PURE__*/_jsx(_Spin, {})\n              }) : /*#__PURE__*/_jsx(_Button, {\n                htmlType: \"submit\",\n                className: \" hover:text-white hover:bg-cyan-700 border border-cyan-700 ml-1\",\n                children: \"Submit\"\n              })\n            })]\n          })\n        })]\n      })\n    })]\n  });\n};\n\nTambah.getInitialProps = async context => {\n  const cookies = nookies.get(context);\n  let categories;\n  const req = await fetchData(cookies);\n  categories = await req.json();\n  return {\n    props: {\n      categories\n    }\n  };\n};\n\nconst fetchData = async cookies => {\n  const endpoint = process.env.NEXT_PUBLIC_URL + \"/categories\";\n  const options = {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: \"Bearer \" + cookies.token\n    }\n  };\n  const req = await fetch(endpoint, options);\n  return req;\n};\n\nexport default Tambah;","map":null,"metadata":{},"sourceType":"module"}