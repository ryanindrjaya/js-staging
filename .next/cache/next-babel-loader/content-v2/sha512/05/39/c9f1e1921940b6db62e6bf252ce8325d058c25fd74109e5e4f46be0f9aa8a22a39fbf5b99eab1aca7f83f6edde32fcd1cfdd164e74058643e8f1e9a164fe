{"ast":null,"code":"import _defineProperty from \"/Users/yudiananta/Development/NextJS/ERP Dev/JS Deploy/ERP-Sejati/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport notes from './data';\nimport actions from './actions';\nvar colors = ['#7ED321', '#de1b1b', '#511E78', '#ff9009', '#42a5f5'];\nvar initState = {\n  notes: notes,\n  colors: colors,\n  selectedId: notes[0].id,\n  seectedColor: notes[0].color\n};\nexport default function noteReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case actions.CHANGE_NOTE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        selectedId: action.selectedId,\n        seectedColor: action.seectedColor\n      });\n\n    case actions.ADD_NOTE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        notes: action.notes,\n        selectedId: action.selectedId\n      });\n\n    case actions.EDIT_NOTE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        notes: action.notes\n      });\n\n    case actions.DELETE_NOTE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        notes: action.notes,\n        selectedId: action.selectedId\n      });\n\n    case actions.CHANGE_COLOR:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        notes: action.notes,\n        seectedColor: action.seectedColor\n      });\n\n    default:\n      return state;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}