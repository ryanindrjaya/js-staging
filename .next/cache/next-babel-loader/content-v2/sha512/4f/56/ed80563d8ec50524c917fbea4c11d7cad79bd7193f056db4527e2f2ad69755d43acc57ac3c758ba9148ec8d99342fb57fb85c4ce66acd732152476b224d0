{"ast":null,"code":"import _toConsumableArray from \"/Users/yudiananta/Development/NextJS/ERP Dev/JS Deploy/JS-Deploy/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"/Users/yudiananta/Development/NextJS/ERP Dev/JS Deploy/JS-Deploy/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar initState = {\n  productList: [],\n  productInfo: {},\n  preorderData: {}\n};\nexport default function Reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"ADD_PRODUCT\":\n      state.productList.push(action.product);\n      return _objectSpread(_objectSpread({}, state), {}, {\n        productList: _toConsumableArray(state.productList)\n      });\n\n    case \"REMOVE_PRODUCT\":\n      state.productList.splice(action.index, 1);\n      return _objectSpread(_objectSpread({}, state), {}, {\n        productList: _toConsumableArray(state.productList)\n      });\n\n    case \"CHANGE_PRODUCT_UNIT\":\n      var index = action.index;\n      var id = action.product.id;\n      var data = action.product.attributes;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        productInfo: _objectSpread(_objectSpread({}, state.productInfo), {}, _defineProperty({}, id, _objectSpread(_objectSpread({}, state.productInfo[id]), {}, {\n          priceUnit: data[\"buy_price_\".concat(index)],\n          unit: data[\"unit_\".concat(index)],\n          d1: data[\"unit_\".concat(index, \"_dp1\")],\n          d2: data[\"unit_\".concat(index, \"_dp2\")],\n          d3: data[\"unit_\".concat(index, \"_dp3\")]\n        })))\n      });\n\n    case \"CHANGE_PRODUCT_QTY\":\n      var qty = action.qty;\n      var id = action.product.id;\n      var data = action.product.attributes;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        productInfo: _objectSpread(_objectSpread({}, state.productInfo), {}, _defineProperty({}, id, _objectSpread(_objectSpread({}, state.productInfo[id]), {}, {\n          qty: qty\n        })))\n      });\n\n    case \"CHANGE_PRODUCT_D1\":\n      var d1 = action.d1;\n      var id = action.product.id;\n      var data = action.product.attributes;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        productInfo: _objectSpread(_objectSpread({}, state.productInfo), {}, _defineProperty({}, id, _objectSpread(_objectSpread({}, state.productInfo[id]), {}, {\n          d1: d1\n        })))\n      });\n\n    case \"CHANGE_PRODUCT_D2\":\n      var d2 = action.d2;\n      var id = action.product.id;\n      var data = action.product.attributes;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        productInfo: _objectSpread(_objectSpread({}, state.productInfo), {}, _defineProperty({}, id, _objectSpread(_objectSpread({}, state.productInfo[id]), {}, {\n          d2: d2\n        })))\n      });\n\n    case \"CHANGE_PRODUCT_D3\":\n      var d3 = action.d3;\n      var id = action.product.id;\n      var data = action.product.attributes;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        productInfo: _objectSpread(_objectSpread({}, state.productInfo), {}, _defineProperty({}, id, _objectSpread(_objectSpread({}, state.productInfo[id]), {}, {\n          d3: d3\n        })))\n      });\n\n    case \"CHANGE_PRODUCT_DISC\":\n      var disc = action.disc;\n      var id = action.product.id;\n      var data = action.product.attributes;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        productInfo: _objectSpread(_objectSpread({}, state.productInfo), {}, _defineProperty({}, id, _objectSpread(_objectSpread({}, state.productInfo[id]), {}, {\n          disc: disc\n        })))\n      });\n\n    case \"SET_PRICE_AFTER_DISC\":\n      var price = action.price;\n      var id = action.product.id;\n      var data = action.product.attributes;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        productInfo: _objectSpread(_objectSpread({}, state.productInfo), {}, _defineProperty({}, id, _objectSpread(_objectSpread({}, state.productInfo[id]), {}, {\n          priceAfterDisc: price\n        })))\n      });\n\n    case \"SET_SUBTOTAL\":\n      var subTotal = action.subTotal;\n      var id = action.product.id;\n      var data = action.product.attributes;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        productInfo: _objectSpread(_objectSpread({}, state.productInfo), {}, _defineProperty({}, id, _objectSpread(_objectSpread({}, state.productInfo[id]), {}, {\n          subTotal: subTotal\n        })))\n      });\n\n    case \"SET_INITIAL_PRODUCT\":\n      state.productList.push(action.product);\n      var id = action.product.id;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        productList: _toConsumableArray(state.productList),\n        productInfo: _objectSpread(_objectSpread({}, state.productInfo), {}, _defineProperty({}, id, {\n          qty: action.qty,\n          unit: action.unit,\n          unitIndex: action.unitIndex,\n          priceUnit: action.priceUnit,\n          disc: action.disc,\n          priceAfterDisc: action.priceAfterDisc,\n          subTotal: action.subTotal,\n          d1: action.d1,\n          d2: action.d2,\n          d3: action.d3\n        }))\n      });\n\n    case \"SET_PREORDER_DATA\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        preorderData: {\n          data: action.data\n        }\n      });\n\n    case \"CLEAR_DATA\":\n      state = {\n        productList: [],\n        productInfo: {},\n        preorderData: {}\n      };\n      return state;\n\n    default:\n      return state;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}