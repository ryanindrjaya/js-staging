{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport Link from \"next/link\";\nimport { connect } from \"react-redux\";\nimport Popover from \"@iso/components/uielements/popover\";\nimport ecommerceAction from \"@iso/redux/ecommerce/actions\";\nimport TopbarDropdownWrapper from \"./TopbarDropdown.styles\";\nimport { TopbarCartIcon } from \"@iso/config/icon.config\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst {\n  changeViewTopbarCart,\n  changeProductQuantity\n} = ecommerceAction;\nlet totalPrice;\n\nclass TopbarAddtoCart extends Component {\n  constructor(props) {\n    super(props);\n    this.handleVisibleChange = this.handleVisibleChange.bind(this);\n    this.hide = this.hide.bind(this);\n    this.renderProducts = this.renderProducts.bind(this);\n    this.changeQuantity = this.changeQuantity.bind(this);\n    this.cancelQuantity = this.cancelQuantity.bind(this);\n  }\n\n  hide() {\n    this.props.changeViewTopbarCart(false);\n  }\n\n  handleVisibleChange() {\n    this.props.changeViewTopbarCart(!this.props.viewTopbarCart);\n  }\n\n  renderProducts() {\n    const {\n      productQuantity,\n      products\n    } = this.props;\n    totalPrice = 0;\n\n    if (!productQuantity || productQuantity.length === 0) {\n      return /*#__PURE__*/_jsx(\"div\", {\n        className: \"isoNoItemMsg\",\n        children: /*#__PURE__*/_jsx(\"span\", {\n          children: \"No item found\"\n        })\n      });\n    }\n\n    return productQuantity.map(product => {\n      totalPrice += product.quantity * products[product.objectID].price;\n      return /*#__PURE__*/_jsx(_Fragment, {});\n    });\n  }\n\n  changeQuantity(objectID, quantity) {\n    const {\n      productQuantity\n    } = this.props;\n    const newProductQuantity = [];\n    productQuantity.forEach(product => {\n      if (product.objectID !== objectID) {\n        newProductQuantity.push(product);\n      } else {\n        newProductQuantity.push({\n          objectID,\n          quantity\n        });\n      }\n    });\n    this.props.changeProductQuantity(newProductQuantity);\n  }\n\n  cancelQuantity(objectID) {\n    const {\n      productQuantity\n    } = this.props;\n    const newProductQuantity = [];\n    productQuantity.forEach(product => {\n      if (product.objectID !== objectID) {\n        newProductQuantity.push(product);\n      }\n    });\n    this.props.changeProductQuantity(newProductQuantity);\n  }\n\n  render() {\n    const {\n      url,\n      productQuantity,\n      viewTopbarCart,\n      customizedTheme\n    } = this.props;\n\n    const content = /*#__PURE__*/_jsxs(TopbarDropdownWrapper, {\n      className: \"topbarAddtoCart\",\n      children: [/*#__PURE__*/_jsx(\"div\", {\n        className: \"isoDropdownHeader\",\n        children: /*#__PURE__*/_jsx(\"h3\", {\n          children: \"Cart\"\n        })\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: \"isoDropdownBody isoCartItemsWrapper\",\n        children: this.renderProducts()\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        className: \"isoDropdownFooterLinks\",\n        onClick: this.hide,\n        children: [/*#__PURE__*/_jsx(Link, {\n          href: \"/dashboard/cart\",\n          children: /*#__PURE__*/_jsx(\"a\", {\n            children: \"View Cart\"\n          })\n        }), /*#__PURE__*/_jsxs(\"h3\", {\n          children: [\"Total Price: \", /*#__PURE__*/_jsxs(\"span\", {\n            children: [\"$\", totalPrice.toFixed(2)]\n          })]\n        })]\n      })]\n    });\n\n    return /*#__PURE__*/_jsx(Popover, {\n      content: content,\n      trigger: \"click\",\n      visible: viewTopbarCart,\n      onVisibleChange: this.handleVisibleChange,\n      placement: \"bottomLeft\",\n      children: /*#__PURE__*/_jsxs(\"div\", {\n        className: \"isoIconWrapper\",\n        children: [/*#__PURE__*/_jsx(TopbarCartIcon, {\n          size: 24,\n          color: customizedTheme.textColor\n        }), productQuantity.length === 0 ? /*#__PURE__*/_jsx(\"span\", {\n          children: \"0\"\n        }) : /*#__PURE__*/_jsx(\"span\", {\n          children: productQuantity.length\n        })]\n      })\n    });\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return _objectSpread(_objectSpread({}, state.Ecommerce), {}, {\n    customizedTheme: state.ThemeSwitcher.topbarTheme\n  });\n}\n\nexport default connect(mapStateToProps, {\n  changeViewTopbarCart,\n  changeProductQuantity\n})(TopbarAddtoCart);","map":null,"metadata":{},"sourceType":"module"}