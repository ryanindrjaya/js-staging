{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport actions from './actions';\nconst initState = {\n  users: null,\n  chatRooms: [],\n  messages: [],\n  selectedChatRoom: null,\n  openCompose: false,\n  viewProfile: false,\n  composedId: null,\n  loading: true,\n  error: false,\n  mobileActiveList: true,\n  mobileActiveProfile: false,\n  restoringData: false,\n  addNewUsersProp: {\n    modalActive: false\n  }\n};\n\nconst sortTimeStamp = (optionA, optionB) => optionA.messageTime - optionB.messageTime;\n\nconst sortChatRooms = (optionA, optionB) => optionB.lastMessageTime - optionA.lastMessageTime;\n\nexport default function reducer(state = initState, action) {\n  switch (action.type) {\n    case actions.CHAT_INIT_SAGA:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          userId: action.userId,\n          user: action.user,\n          users: action.users,\n          chatRooms: action.chatRooms,\n          messages: action.messages,\n          selectedChatRoom: action.chatRooms[0],\n          loading: false\n        });\n      }\n\n    case actions.CHAT_UPDATE_CHATROOM:\n      {\n        const {\n          chatRoom,\n          messages,\n          selected\n        } = action;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          chatRooms: state.chatRooms.map(chatroom => chatroom.id === chatRoom.id ? _objectSpread(_objectSpread({}, chatroom), {}, {\n            lastMessage: chatRoom.lastMessage,\n            lastMessageTime: chatRoom.lastMessageTime\n          }) : chatroom).sort(sortChatRooms),\n          composedId: null,\n          openCompose: false,\n          selectedChatRoom: selected ? chatRoom : state.selectedChatRoom,\n          viewProfile: selected ? false : state.viewProfile,\n          messages: messages ? messages.sort(sortTimeStamp) : state.messages\n        });\n      }\n\n    case actions.CHAT_TOGGLE_COMPOSE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        openCompose: !state.openCompose,\n        viewProfile: false\n      });\n\n    case actions.CHAT_SET_TOGGLE_COMPOSED_ID:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        composedId: action.id\n      });\n\n    case actions.CHAT_SET_TOGGLE_VIEW_PROFILE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        viewProfile: action.viewProfile\n      });\n\n    case actions.TOGGLE_MOBILE_LIST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mobileActiveList: action.mobileActiveList\n      });\n\n    case actions.TOGGLE_MOBILE_PROFILE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mobileActiveProfile: action.mobileActiveProfile\n      });\n\n    case actions.RESTORE_DEMO_DATA:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        restoringData: true\n      });\n\n    case actions.RESTORE_DEMO_DATA_DONE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        restoringData: false\n      });\n\n    case actions.UPDATE_NEW_USER_PROPS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addNewUsersProp: action.addNewUsersProp\n      });\n\n    case actions.NEW_MESSAGE_SUCCESFULL:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        openCompose: false,\n        composedId: null\n      });\n\n    case actions.ADD_NEW_USER_SAGA:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addNewUsersProp: {\n          modalActive: false\n        },\n        users: [action.user, ...state.users],\n        chatRooms: [action.chatRoom, ...state.chatRooms]\n      });\n\n    default:\n      return state;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}