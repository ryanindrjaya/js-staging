{"ast":null,"code":"import _defineProperty from \"/Users/yudiananta/Development/NextJS/ERP Dev/JS Deploy/JS-Deploy/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport _regeneratorRuntime from \"/Users/yudiananta/Development/NextJS/ERP Dev/JS Deploy/JS-Deploy/node_modules/next/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(loadFromFirestore),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(storeIntoFirestore),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(resetFireStoreDocuments),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\nimport { all, takeEvery, put, call } from 'redux-saga/effects';\nimport actions from './actions';\nimport omit from 'lodash/omit';\nimport fakeData from './fakeData';\nimport { rsf, db } from '@iso/lib/firebase/firebase';\nimport { convertCollectionsSnapshotToMap, deleteDocuments, addCollectionAndDocuments } from '@iso/lib/firebase/firebase.util';\nvar fakeDataList = new fakeData(5).getAll();\n/**\n * DOC: https://redux-saga-firebase.js.org/reference/dev/firestore\n */\n\nvar COLLECTION_NAME = 'investors'; // change your collection\n\nvar ORDER_BY = 'id';\nvar ORDER = 'desc';\n\nfunction loadFromFirestore() {\n  var collectionRef, snapshots, data;\n  return _regeneratorRuntime.wrap(function loadFromFirestore$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          collectionRef = db.collection(COLLECTION_NAME).where('deleted_at', '==', null).orderBy(ORDER_BY, ORDER);\n          _context.next = 4;\n          return call(rsf.firestore.getCollection, collectionRef);\n\n        case 4:\n          snapshots = _context.sent;\n          _context.next = 7;\n          return call(convertCollectionsSnapshotToMap, snapshots);\n\n        case 7:\n          data = _context.sent;\n          _context.next = 10;\n          return put(actions.loadFromFireStoreSuccess(data));\n\n        case 10:\n          _context.next = 17;\n          break;\n\n        case 12:\n          _context.prev = 12;\n          _context.t0 = _context[\"catch\"](0);\n          console.log(_context.t0);\n          _context.next = 17;\n          return put(actions.loadFromFireStoreError(_context.t0));\n\n        case 17:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 12]]);\n}\n\nfunction storeIntoFirestore(_ref) {\n  var payload, data, actionName;\n  return _regeneratorRuntime.wrap(function storeIntoFirestore$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          payload = _ref.payload;\n          data = payload.data, actionName = payload.actionName;\n          _context2.prev = 2;\n          _context2.t0 = actionName;\n          _context2.next = _context2.t0 === 'delete' ? 6 : _context2.t0 === 'update' ? 9 : 12;\n          break;\n\n        case 6:\n          _context2.next = 8;\n          return call(rsf.firestore.setDocument, \"\".concat(COLLECTION_NAME, \"/\").concat(data.key), {\n            deleted_at: new Date().getTime()\n          });\n\n        case 8:\n          return _context2.abrupt(\"break\", 15);\n\n        case 9:\n          _context2.next = 11;\n          return call(rsf.firestore.setDocument, \"\".concat(COLLECTION_NAME, \"/\").concat(data.key), _objectSpread({}, omit(data, ['key'])));\n\n        case 11:\n          return _context2.abrupt(\"break\", 15);\n\n        case 12:\n          _context2.next = 14;\n          return call(rsf.firestore.addDocument, COLLECTION_NAME, data);\n\n        case 14:\n          return _context2.abrupt(\"break\", 15);\n\n        case 15:\n          _context2.next = 17;\n          return put({\n            type: actions.LOAD_FROM_FIRESTORE\n          });\n\n        case 17:\n          _context2.next = 24;\n          break;\n\n        case 19:\n          _context2.prev = 19;\n          _context2.t1 = _context2[\"catch\"](2);\n          console.log(_context2.t1);\n          _context2.next = 24;\n          return put(actions.saveIntoFireStoreError(_context2.t1));\n\n        case 24:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[2, 19]]);\n}\n\nfunction resetFireStoreDocuments() {\n  return _regeneratorRuntime.wrap(function resetFireStoreDocuments$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(deleteDocuments, COLLECTION_NAME);\n\n        case 3:\n          _context3.next = 5;\n          return call(addCollectionAndDocuments, COLLECTION_NAME, fakeDataList);\n\n        case 5:\n          _context3.next = 7;\n          return put({\n            type: actions.LOAD_FROM_FIRESTORE\n          });\n\n        case 7:\n          _context3.next = 12;\n          break;\n\n        case 9:\n          _context3.prev = 9;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.log(_context3.t0);\n\n        case 12:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 9]]);\n}\n\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return all([takeEvery(actions.LOAD_FROM_FIRESTORE, loadFromFirestore), takeEvery(actions.SAVE_INTO_FIRESTORE, storeIntoFirestore), takeEvery(actions.RESET_FIRESTORE_DOCUMENTS, resetFireStoreDocuments)]);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}","map":null,"metadata":{},"sourceType":"module"}