{"ast":null,"code":"import React from \"react\";\nimport nookies from \"nookies\";\nimport * as moment from \"moment\";\n// In this scenario, we will look up for data in inventory details with params exp.date, productId, and LocationId\n// if data is already exist, then we should update the stock inventory details with the exp.date\n// if they are not, then we create a new inventory details\n// It happens with master inventory too. So basicly, we gonna check first. If exist, then UPDATE.\nconst cookies = nookies.get(null, \"token\");\n\nconst calculateTotalUnit = (unit, product) => {\n  var total = 1;\n  var productIndex = 0;\n  var productSmallestUnit = \"\";\n\n  for (let index = 1; index < 6; index++) {\n    if (product.attributes[`unit_${index}`] === unit) {\n      productIndex = index;\n    }\n\n    if (product.attributes[`unit_${index}`]) {\n      productSmallestUnit = product.attributes[`unit_${index}`];\n    }\n  }\n\n  for (let index = productIndex + 1; index < 6; index++) {\n    total = total * product.attributes[`qty_${index}`];\n\n    if (total === 0) {\n      total = 1;\n    }\n  }\n\n  return {\n    total,\n    productSmallestUnit\n  };\n};\n\nfunction createInventory(data) {\n  const purchasingDetails = data.attributes.purchasing_details.data;\n  purchasingDetails.forEach(element => {\n    const expiredDate = new Date(element.attributes.expired_date);\n    const batch = element.attributes.batch;\n    const unitOrder = element.attributes.unit_order;\n    const totalOrder = parseInt(element.attributes.total_order);\n    const product = element.attributes.product.data;\n    const result = calculateTotalUnit(unitOrder, product);\n    const totalQty = result.total * totalOrder;\n    const location = element.attributes.location.data;\n    const data = {\n      data: {\n        expired_date: expiredDate,\n        batch: batch,\n        products: {\n          id: product.id\n        },\n        stock: totalQty,\n        smallest_unit: result.productSmallestUnit,\n        locations: {\n          id: location.id\n        },\n        keterangan: \"Pembelian\"\n      }\n    }; // check existing stock\n\n    checkDetailStock(data, product.id, location.id); //\n  });\n}\n\nconst checkDetailStock = async (data, productId, locationId) => {\n  const endpoint = process.env.NEXT_PUBLIC_URL + `/inventory-details?filters[locations][id][$eq]=${locationId}&filters[products][id][$eq]=${productId}&filters[expired_date][$eq]=2024-10-01&populate=*`;\n  const options = {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: \"Bearer \" + cookies.token\n    }\n  };\n  const req = await fetch(endpoint, options);\n  const res = await req.json();\n\n  if (res.data.length > 0) {\n    updateAPI(res.data[0], data, productId, locationId);\n  } else {\n    createAPI(data, productId, locationId);\n  }\n\n  createInventoryHistory(data);\n};\n\nconst updateAPI = async (resData, data, productId, locationId) => {\n  var currentStock = resData.attributes.stock;\n  var finalStock = currentStock + data.data.stock;\n  resData.attributes.stock = finalStock;\n  resData.attributes.locations = data.data.locations;\n  resData.attributes.products = data.data.products;\n  const newData = {\n    data: resData.attributes\n  };\n  const JSONdata = JSON.stringify(newData);\n  const endpoint = process.env.NEXT_PUBLIC_URL + \"/inventory-details/\" + resData.id;\n  const options = {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: \"Bearer \" + cookies.token\n    },\n    body: JSONdata\n  };\n  const req = await fetch(endpoint, options);\n  const res = await req.json();\n\n  if (req.status === 200) {\n    createInventoryAPI(locationId, productId, data.data.stock, data);\n  }\n};\n\nconst createAPI = async (data, productId, locationId) => {\n  const JSONdata = JSON.stringify(data);\n  const endpoint = process.env.NEXT_PUBLIC_URL + \"/inventory-details\";\n  const options = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: \"Bearer \" + cookies.token\n    },\n    body: JSONdata\n  };\n  const req = await fetch(endpoint, options);\n  const res = await req.json();\n\n  if (req.status === 200) {\n    // check data location\n    createInventoryAPI(locationId, productId, data.data.stock, data);\n  }\n};\n\nconst createInventoryHistory = async data => {\n  const JSONdata = JSON.stringify(data);\n  const endpoint = process.env.NEXT_PUBLIC_URL + \"/inventory-histories\";\n  const options = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: \"Bearer \" + cookies.token\n    },\n    body: JSONdata\n  };\n  const req = await fetch(endpoint, options);\n  const res = await req.json();\n}; // ======================= MASTER INVENTORY =======================\n\n\nconst createInventoryAPI = async (locationId, productId, quantity, data) => {\n  const endpoint = process.env.NEXT_PUBLIC_URL + `/inventories?filters[locations][id][$eq]=${locationId}&filters[products][id][$eq]=${productId}&populate=locations`;\n  const options = {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: \"Bearer \" + cookies.token\n    }\n  };\n  const req = await fetch(endpoint, options);\n  const res = await req.json();\n\n  if (res.data.length > 0) {\n    // put existing data\n    const totalStock = res.data[0].attributes.total_stock + quantity;\n    await putExistingData(res.data[0].id, res.data[0].attributes, totalStock);\n  } else {\n    // create new data\n    await createNewData(data, locationId);\n  }\n};\n\nconst putExistingData = async (id, data, totalStock) => {\n  data.total_stock = totalStock;\n  data.locations = {\n    id: data.locations.data[0].id\n  };\n  const putData = {\n    data: data\n  };\n  const JSONdata = JSON.stringify(putData);\n  const endpoint = process.env.NEXT_PUBLIC_URL + \"/inventories/\" + id;\n  const options = {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: \"Bearer \" + cookies.token\n    },\n    body: JSONdata\n  };\n  const req = await fetch(endpoint, options);\n};\n\nconst createNewData = async (data, locationId) => {\n  data.data.total_stock = data.data.stock;\n  data.data.locations = {\n    id: locationId\n  };\n  const JSONdata = JSON.stringify(data);\n  const endpoint = process.env.NEXT_PUBLIC_URL + \"/inventories\";\n  const options = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: \"Bearer \" + cookies.token\n    },\n    body: JSONdata\n  };\n  const req = await fetch(endpoint, options); //   const res = await req.json();\n};\n\nconst getUserLocation = async cookies => {\n  const endpoint = process.env.NEXT_PUBLIC_URL + \"/users/me?populate=*\";\n  const options = {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: \"Bearer \" + cookies.token\n    },\n    body: JSONdata\n  };\n  const req = await fetch(endpoint, options);\n  const res = await req.json();\n  return res;\n};\n\nexport default createInventory;","map":null,"metadata":{},"sourceType":"module"}