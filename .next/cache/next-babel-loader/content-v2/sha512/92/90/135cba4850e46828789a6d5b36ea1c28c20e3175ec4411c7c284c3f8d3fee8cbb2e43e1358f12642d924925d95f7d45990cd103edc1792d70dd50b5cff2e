{"ast":null,"code":"const mailActions = {\n  FILTER_ATTRIBUTE: 'FILTER_ATTRIBUTE',\n  SELECTED_MAIL: 'SELECTED_MAIL',\n  COMPOSE_MAIL: 'COMPOSE_MAIL',\n  REPLY_MAIL: 'REPLY_MAIL',\n  SEARCH_STRING: 'SEARCH_STRING',\n  filterAction: newFilterAttr => {\n    return (dispatch, getState) => {\n      const filterAttr = getState().Mails.filterAttr;\n\n      if (newFilterAttr) {\n        if (newFilterAttr.bucket) {\n          filterAttr.bucket = newFilterAttr.bucket;\n          filterAttr.tag = newFilterAttr.tag;\n        } else if (newFilterAttr.tag) {\n          filterAttr.tag = newFilterAttr.tag;\n        }\n      }\n\n      dispatch({\n        type: mailActions.FILTER_ATTRIBUTE,\n        filterAttr\n      });\n    };\n  },\n  selectMail: selectedMail => {\n    return (dispatch, getState) => {\n      const allMails = getState().Mails.allMails;\n      allMails[allMails.findIndex(mail => mail.id === selectedMail)].read = true;\n      dispatch({\n        type: mailActions.SELECTED_MAIL,\n        selectedMail,\n        allMails\n      });\n    };\n  },\n  changeComposeMail: composeMail => ({\n    type: mailActions.COMPOSE_MAIL,\n    composeMail\n  }),\n  changeReplyMail: replyMail => ({\n    type: mailActions.REPLY_MAIL,\n    replyMail\n  }),\n  changeSearchString: searchString => ({\n    type: mailActions.SEARCH_STRING,\n    searchString\n  })\n};\nexport default mailActions;","map":null,"metadata":{},"sourceType":"module"}