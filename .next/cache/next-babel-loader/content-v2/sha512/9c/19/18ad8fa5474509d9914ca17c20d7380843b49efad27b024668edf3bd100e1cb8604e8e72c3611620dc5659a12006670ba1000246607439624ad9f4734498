{"ast":null,"code":"import _EditOutlined from \"@ant-design/icons/lib/icons/EditOutlined\";\nimport _CheckOutlined from \"@ant-design/icons/lib/icons/CheckOutlined\";\nvar _jsxFileName = \"/Users/yudiananta/Development/NextJS/ERP Dev/JS Deploy/ERP-Sejati/components/Tables/EditableCell.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport Input from '../uielements/input';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function EditableCell(props) {\n  const [state, setState] = React.useState({\n    value: props.value,\n    editable: false\n  });\n\n  const handleChange = event => {\n    const value = event.target.value;\n    setState(_objectSpread(_objectSpread({}, state), {}, {\n      value\n    }));\n  };\n\n  const check = () => {\n    setState(_objectSpread(_objectSpread({}, state), {}, {\n      editable: false\n    }));\n\n    if (props.onChange) {\n      props.onChange(state.value, props.columnsKey, props.index);\n    }\n  };\n\n  const edit = () => {\n    setState(_objectSpread(_objectSpread({}, state), {}, {\n      editable: true\n    }));\n  };\n\n  const {\n    value,\n    editable\n  } = state;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"isoEditData\",\n    children: editable ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"isoEditDataWrapper\",\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        value: value,\n        onChange: handleChange,\n        onPressEnter: check\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(_CheckOutlined, {\n        className: \"isoEditIcon\",\n        onClick: check\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"isoDataWrapper\",\n      children: [value || ' ', /*#__PURE__*/_jsxDEV(_EditOutlined, {\n        className: \"isoEditIcon\",\n        onClick: edit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/Users/yudiananta/Development/NextJS/ERP Dev/JS Deploy/ERP-Sejati/components/Tables/EditableCell.js"],"names":["React","Input","EditableCell","props","state","setState","useState","value","editable","handleChange","event","target","check","onChange","columnsKey","index","edit"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;;AAGA,eAAe,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAC1C,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,KAAK,CAACM,QAAN,CAAe;AACvCC,IAAAA,KAAK,EAAEJ,KAAK,CAACI,KAD0B;AAEvCC,IAAAA,QAAQ,EAAE;AAF6B,GAAf,CAA1B;;AAIA,QAAMC,YAAY,GAAIC,KAAD,IAAW;AAC9B,UAAMH,KAAK,GAAGG,KAAK,CAACC,MAAN,CAAaJ,KAA3B;AACAF,IAAAA,QAAQ,iCAAMD,KAAN;AAAaG,MAAAA;AAAb,OAAR;AACD,GAHD;;AAIA,QAAMK,KAAK,GAAG,MAAM;AAClBP,IAAAA,QAAQ,iCAAMD,KAAN;AAAaI,MAAAA,QAAQ,EAAE;AAAvB,OAAR;;AACA,QAAIL,KAAK,CAACU,QAAV,EAAoB;AAClBV,MAAAA,KAAK,CAACU,QAAN,CAAeT,KAAK,CAACG,KAArB,EAA4BJ,KAAK,CAACW,UAAlC,EAA8CX,KAAK,CAACY,KAApD;AACD;AACF,GALD;;AAMA,QAAMC,IAAI,GAAG,MAAM;AACjBX,IAAAA,QAAQ,iCAAMD,KAAN;AAAaI,MAAAA,QAAQ,EAAE;AAAvB,OAAR;AACD,GAFD;;AAGA,QAAM;AAAED,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAsBJ,KAA5B;AACA,sBACE;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA,cACGI,QAAQ,gBACP;AAAK,MAAA,SAAS,EAAC,oBAAf;AAAA,8BACE,QAAC,KAAD;AAAO,QAAA,KAAK,EAAED,KAAd;AAAqB,QAAA,QAAQ,EAAEE,YAA/B;AAA6C,QAAA,YAAY,EAAEG;AAA3D;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAe,QAAA,SAAS,EAAC,aAAzB;AAAuC,QAAA,OAAO,EAAEA;AAAhD;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADO,gBAMP;AAAG,MAAA,SAAS,EAAC,gBAAb;AAAA,iBACGL,KAAK,IAAI,GADZ,eAEE;AAAc,QAAA,SAAS,EAAC,aAAxB;AAAsC,QAAA,OAAO,EAAES;AAA/C;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAPJ;AAAA;AAAA;AAAA;AAAA,UADF;AAeD","sourcesContent":["import React from 'react';\nimport Input from '../uielements/input';\nimport { CheckOutlined, EditOutlined } from '@ant-design/icons';\n\nexport default function EditableCell(props) {\n  const [state, setState] = React.useState({\n    value: props.value,\n    editable: false,\n  });\n  const handleChange = (event) => {\n    const value = event.target.value;\n    setState({ ...state, value });\n  };\n  const check = () => {\n    setState({ ...state, editable: false });\n    if (props.onChange) {\n      props.onChange(state.value, props.columnsKey, props.index);\n    }\n  };\n  const edit = () => {\n    setState({ ...state, editable: true });\n  };\n  const { value, editable } = state;\n  return (\n    <div className=\"isoEditData\">\n      {editable ? (\n        <div className=\"isoEditDataWrapper\">\n          <Input value={value} onChange={handleChange} onPressEnter={check} />\n          <CheckOutlined className=\"isoEditIcon\" onClick={check} />\n        </div>\n      ) : (\n        <p className=\"isoDataWrapper\">\n          {value || ' '}\n          <EditOutlined className=\"isoEditIcon\" onClick={edit} />\n        </p>\n      )}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}