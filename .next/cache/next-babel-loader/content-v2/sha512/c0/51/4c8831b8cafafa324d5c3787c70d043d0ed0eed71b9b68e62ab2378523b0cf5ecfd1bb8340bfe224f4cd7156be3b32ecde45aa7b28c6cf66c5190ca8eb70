{"ast":null,"code":"// formatter and parser input number\n// export const formatterNumber = (val) => {\n//   const newValue = Number(val).toFixed(2);\n//   if (!val) return 0;\n//   return `${newValue}`\n//     .replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\n//     .replace(/\\.(?=\\d{0,2}$)/g, \".\");\n// };\nexport const parserNumber = val => {\n  let newValue = Number.parseFloat(val.replace(/\\$\\s?|(\\,*)/g, \"\").replace(/(\\,{1})/g, \".\")).toFixed(2);\n  let rounded = Number(newValue).toFixed(2);\n  if (!val) return 0;\n  return rounded;\n}; // formatter and parser input number\n\nexport const formatterNumber = (val, unit) => {\n  if (!val) return 0;\n  const newValue = `${val}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\").replace(/\\.(?=\\d{0,2}$)/g, \".\");\n  let test = Number.parseFloat(newValue.replace(/\\$\\s?|(\\,*)/g, \"\").replace(/(\\,{1})/g, \".\")).toFixed(2);\n  let rounded = Number(test).toFixed(2);\n  console.log(\"formatter\", rounded, newValue);\n\n  if (unit === \"buy_price_1\" || unit === \"purchase_discount_1\" || unit === \"pricelist_1\" || unit === \"sold_price_1\") {\n    return newValue;\n  } else {\n    const newRounded = `${rounded}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\").replace(/\\.(?=\\d{0,2}$)/g, \".\");\n    return newRounded;\n  }\n}; // export const parserNumber = (val) => {\n//   if (!val) return 0;\n//   return Number.parseFloat(\n//     val.replace(/\\$\\s?|(\\,*)/g, \"\").replace(/(\\,{1})/g, \",\")\n//   ).toFixed(2);\n// };","map":{"version":3,"sources":["/Users/yudiananta/Development/NextJS/ERP Dev/JS Deploy/JS-Deploy/components/Formatter/CurrencyFormatter.js"],"names":["parserNumber","val","newValue","Number","parseFloat","replace","toFixed","rounded","formatterNumber","unit","test","console","log","newRounded"],"mappings":"AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA,OAAO,MAAMA,YAAY,GAAIC,GAAD,IAAS;AACnC,MAAIC,QAAQ,GAAGC,MAAM,CAACC,UAAP,CACbH,GAAG,CAACI,OAAJ,CAAY,cAAZ,EAA4B,EAA5B,EAAgCA,OAAhC,CAAwC,UAAxC,EAAoD,GAApD,CADa,EAEbC,OAFa,CAEL,CAFK,CAAf;AAIA,MAAIC,OAAO,GAAGJ,MAAM,CAACD,QAAD,CAAN,CAAiBI,OAAjB,CAAyB,CAAzB,CAAd;AAEA,MAAI,CAACL,GAAL,EAAU,OAAO,CAAP;AACV,SAAOM,OAAP;AACD,CATM,C,CAWP;;AACA,OAAO,MAAMC,eAAe,GAAG,CAACP,GAAD,EAAMQ,IAAN,KAAe;AAC5C,MAAI,CAACR,GAAL,EAAU,OAAO,CAAP;AAEV,QAAMC,QAAQ,GAAI,GAAED,GAAI,EAAP,CACdI,OADc,CACN,uBADM,EACmB,GADnB,EAEdA,OAFc,CAEN,iBAFM,EAEa,GAFb,CAAjB;AAIA,MAAIK,IAAI,GAAGP,MAAM,CAACC,UAAP,CACTF,QAAQ,CAACG,OAAT,CAAiB,cAAjB,EAAiC,EAAjC,EAAqCA,OAArC,CAA6C,UAA7C,EAAyD,GAAzD,CADS,EAETC,OAFS,CAED,CAFC,CAAX;AAIA,MAAIC,OAAO,GAAGJ,MAAM,CAACO,IAAD,CAAN,CAAaJ,OAAb,CAAqB,CAArB,CAAd;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBL,OAAzB,EAAkCL,QAAlC;;AAEA,MACEO,IAAI,KAAK,aAAT,IACAA,IAAI,KAAK,qBADT,IAEAA,IAAI,KAAK,aAFT,IAGAA,IAAI,KAAK,cAJX,EAKE;AACA,WAAOP,QAAP;AACD,GAPD,MAOO;AACL,UAAMW,UAAU,GAAI,GAAEN,OAAQ,EAAX,CAChBF,OADgB,CACR,uBADQ,EACiB,GADjB,EAEhBA,OAFgB,CAER,iBAFQ,EAEW,GAFX,CAAnB;AAIA,WAAOQ,UAAP;AACD;AACF,CA5BM,C,CA8BP;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// formatter and parser input number\n// export const formatterNumber = (val) => {\n//   const newValue = Number(val).toFixed(2);\n\n//   if (!val) return 0;\n\n//   return `${newValue}`\n//     .replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\n//     .replace(/\\.(?=\\d{0,2}$)/g, \".\");\n// };\n\nexport const parserNumber = (val) => {\n  let newValue = Number.parseFloat(\n    val.replace(/\\$\\s?|(\\,*)/g, \"\").replace(/(\\,{1})/g, \".\")\n  ).toFixed(2);\n\n  let rounded = Number(newValue).toFixed(2);\n\n  if (!val) return 0;\n  return rounded;\n};\n\n// formatter and parser input number\nexport const formatterNumber = (val, unit) => {\n  if (!val) return 0;\n\n  const newValue = `${val}`\n    .replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\n    .replace(/\\.(?=\\d{0,2}$)/g, \".\");\n\n  let test = Number.parseFloat(\n    newValue.replace(/\\$\\s?|(\\,*)/g, \"\").replace(/(\\,{1})/g, \".\")\n  ).toFixed(2);\n\n  let rounded = Number(test).toFixed(2);\n  console.log(\"formatter\", rounded, newValue);\n\n  if (\n    unit === \"buy_price_1\" ||\n    unit === \"purchase_discount_1\" ||\n    unit === \"pricelist_1\" ||\n    unit === \"sold_price_1\"\n  ) {\n    return newValue;\n  } else {\n    const newRounded = `${rounded}`\n      .replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\n      .replace(/\\.(?=\\d{0,2}$)/g, \".\");\n\n    return newRounded;\n  }\n};\n\n// export const parserNumber = (val) => {\n//   if (!val) return 0;\n//   return Number.parseFloat(\n//     val.replace(/\\$\\s?|(\\,*)/g, \"\").replace(/(\\,{1})/g, \",\")\n//   ).toFixed(2);\n// };\n"]},"metadata":{},"sourceType":"module"}