{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useEffect } from 'react';\nimport Router from 'next/router';\nimport nextCookie from 'next-cookies';\nimport cookie from 'js-cookie';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const setCookie = (key, value) => {\n  if (false) {\n    cookie.set(key, value, {\n      expires: 1,\n      path: '/'\n    });\n  }\n};\nexport const removeCookie = key => {\n  if (false) {\n    cookie.remove(key, {\n      expires: 1\n    });\n  }\n};\nexport const getCookie = (key, req) => {\n  return false ? getCookieFromBrowser(key) : getCookieFromServer(key, req);\n};\n\nconst getCookieFromBrowser = key => {\n  return cookie.get(key);\n};\n\nconst getCookieFromServer = (key, req) => {\n  if (!req.headers.cookie) {\n    return undefined;\n  }\n\n  const rawCookie = req.headers.cookie.split(';').find(c => c.trim().startsWith(`${key}=`));\n\n  if (!rawCookie) {\n    return undefined;\n  }\n\n  return rawCookie.split('=')[1];\n};\n\nexport const login = ({\n  token\n}) => {\n  cookie.set('token', token, {\n    expires: 1\n  });\n  Router.push('/dashboard');\n};\nexport const auth = ctx => {\n  const {\n    token\n  } = nextCookie(ctx);\n  /*\n   * If `ctx.req` is available it means we are on the server.\n   * Additionally if there's no token it means the user is not logged in.\n   */\n\n  if (ctx.req && !token) {\n    ctx.res.writeHead(302, {\n      Location: '/signin'\n    });\n    ctx.res.end();\n  } // We already checked for server. This should only happen on client.\n\n\n  if (!token) {\n    Router.push('/signin');\n  }\n\n  return token;\n};\nexport const logout = () => {\n  cookie.remove('token'); // to support logging out from all windows\n\n  window.localStorage.setItem('logout', Date.now());\n  Router.push('/signin');\n};\nexport const withAuthSync = WrappedComponent => {\n  const Wrapper = props => {\n    const syncLogout = event => {\n      if (event.key === 'logout') {\n        console.log('logged out from storage!');\n        Router.push('/signin');\n      }\n    };\n\n    useEffect(() => {\n      window.addEventListener('storage', syncLogout);\n      return () => {\n        window.removeEventListener('storage', syncLogout);\n        window.localStorage.removeItem('logout');\n      };\n    }, [null]);\n    return /*#__PURE__*/_jsx(WrappedComponent, _objectSpread({}, props));\n  };\n\n  Wrapper.getInitialProps = async ctx => {\n    const token = auth(ctx);\n    const componentProps = WrappedComponent.getInitialProps && (await WrappedComponent.getInitialProps(ctx));\n    return _objectSpread(_objectSpread({}, componentProps), {}, {\n      token\n    });\n  };\n\n  return Wrapper;\n};","map":null,"metadata":{},"sourceType":"module"}