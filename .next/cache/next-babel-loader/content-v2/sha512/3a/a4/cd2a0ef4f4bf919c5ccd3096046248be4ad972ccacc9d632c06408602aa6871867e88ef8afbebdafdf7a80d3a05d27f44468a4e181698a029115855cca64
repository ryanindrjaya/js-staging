{"ast":null,"code":"import { Map } from 'immutable';\nexport function clearToken() {\n  localStorage.removeItem('id_token');\n}\nexport function getToken() {\n  try {\n    const idToken = localStorage.getItem('id_token');\n    return new Map({\n      idToken\n    });\n  } catch (err) {\n    clearToken();\n    return new Map();\n  }\n}\nexport function arrayEqual(array1, array2) {\n  return array1.sort().toString() == array2.sort().toString();\n}\nexport function timeDifference(givenTime) {\n  givenTime = new Date(givenTime);\n  const milliseconds = new Date().getTime() - givenTime.getTime();\n\n  const numberEnding = number => {\n    return number > 1 ? 's' : '';\n  };\n\n  const number = num => num > 9 ? '' + num : '0' + num;\n\n  const getTime = () => {\n    let temp = Math.floor(milliseconds / 1000);\n    const years = Math.floor(temp / 31536000);\n\n    if (years) {\n      const month = number(givenTime.getUTCMonth() + 1);\n      const day = number(givenTime.getUTCDate());\n      const year = givenTime.getUTCFullYear() % 100;\n      return `${day}-${month}-${year}`;\n    }\n\n    const days = Math.floor((temp %= 31536000) / 86400);\n\n    if (days) {\n      if (days < 28) {\n        return days + ' day' + numberEnding(days);\n      } else {\n        const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n        const month = months[givenTime.getUTCMonth()];\n        const day = number(givenTime.getUTCDate());\n        return `${day} ${month}`;\n      }\n    }\n\n    const hours = Math.floor((temp %= 86400) / 3600);\n\n    if (hours) {\n      return `${hours} hour${numberEnding(hours)} ago`;\n    }\n\n    const minutes = Math.floor((temp %= 3600) / 60);\n\n    if (minutes) {\n      return `${minutes} minute${numberEnding(minutes)} ago`;\n    }\n\n    return 'a few seconds ago';\n  };\n\n  return getTime();\n}\nexport function stringToInt(value, defValue = 0) {\n  if (!value) {\n    return 0;\n  } else if (!isNaN(value)) {\n    return parseInt(value, 10);\n  }\n\n  return defValue;\n}\nexport function stringToPosetiveInt(value, defValue = 0) {\n  const val = stringToInt(value, defValue);\n  return val > -1 ? val : defValue;\n}","map":null,"metadata":{},"sourceType":"module"}