{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// saga.js\nimport { all, takeEvery, put, select } from 'redux-saga/effects';\nimport scrumBoardActions from './actions';\nimport DemoData from './data';\nimport { loadState, saveState } from '@iso/lib/helpers/localStorage';\n\nconst getScrumBoards = state => state.scrumBoard;\n\nfunction* boardsRenderEffectSaga() {\n  let boards;\n  let columns;\n  let tasks;\n\n  if (localStorage.hasOwnProperty('scrum_boards')) {\n    const scrum_boards = loadState('scrum_boards');\n    boards = scrum_boards.boards;\n    columns = scrum_boards.columns;\n    tasks = scrum_boards.tasks;\n  } else {\n    boards = DemoData.boards;\n    columns = DemoData.columns;\n    tasks = DemoData.tasks;\n  }\n\n  saveState('scrum_boards', {\n    boards,\n    columns,\n    tasks\n  });\n  yield put(scrumBoardActions.setBoardsData({\n    boards,\n    columns,\n    tasks\n  }));\n}\n\nfunction* boardRenderEffectSaga({\n  payload\n}) {\n  let scrum_boards;\n  let boards;\n  let columns;\n  let tasks;\n\n  if (localStorage.hasOwnProperty('scrum_boards')) {\n    scrum_boards = loadState('scrum_boards');\n    boards = scrum_boards.boards;\n    columns = scrum_boards.columns;\n    tasks = scrum_boards.tasks;\n  } else {\n    scrum_boards = DemoData;\n    boards = DemoData.boards;\n    columns = DemoData.columns;\n    tasks = DemoData.tasks;\n  }\n\n  yield put(scrumBoardActions.setBoardData({\n    boards,\n    columns,\n    tasks\n  }));\n}\n\nfunction* createOrUpdateBoardEffectSaga(action) {\n  let scrum_boards = yield select(getScrumBoards);\n\n  const boards = _objectSpread(_objectSpread({}, scrum_boards.boards), {}, {\n    [action.payload.id]: action.payload\n  });\n\n  scrum_boards = {\n    columns: scrum_boards.columns,\n    tasks: scrum_boards.tasks,\n    boards: boards\n  };\n  saveState('scrum_boards', scrum_boards);\n  yield put(scrumBoardActions.createOrUpdateBoard(boards));\n}\n\nfunction* deleteBoardEffectSaga(action) {\n  let scrum_boards = yield select(getScrumBoards);\n\n  const BOARDS = _objectSpread({}, scrum_boards.boards);\n\n  delete BOARDS[action.payload];\n  const boards = BOARDS;\n  scrum_boards = _objectSpread(_objectSpread({}, scrum_boards), {}, {\n    boards\n  });\n  saveState('scrum_boards', scrum_boards);\n  yield put(scrumBoardActions.deleteBoard(boards));\n}\n\nfunction* createOrUpdateColumnEffectSaga({\n  payload: {\n    column,\n    board_id\n  }\n}) {\n  let scrum_boards = yield select(getScrumBoards);\n  console.log(column, board_id);\n\n  const columns = _objectSpread(_objectSpread({}, scrum_boards.columns), {}, {\n    [column.id]: _objectSpread(_objectSpread({}, column), {}, {\n      editing: false\n    })\n  });\n\n  let boards = scrum_boards.boards;\n\n  if (!column.editing) {\n    boards = _objectSpread(_objectSpread({}, scrum_boards.boards), {}, {\n      [board_id]: _objectSpread(_objectSpread({}, scrum_boards.boards[board_id]), {}, {\n        column_orders: [...scrum_boards.boards[board_id].column_orders, column.id]\n      })\n    });\n  }\n\n  scrum_boards = _objectSpread(_objectSpread({}, scrum_boards), {}, {\n    columns,\n    boards\n  });\n  saveState('scrum_boards', scrum_boards);\n  yield put(scrumBoardActions.createOrUpdateColumn({\n    columns,\n    boards\n  }));\n}\n\nfunction* deleteColumnEffectSaga({\n  payload: {\n    column_id,\n    board_id\n  }\n}) {\n  let scrum_boards = yield select(getScrumBoards);\n\n  const COLUMNS = _objectSpread({}, scrum_boards.columns);\n\n  delete COLUMNS[column_id];\n  const columns = COLUMNS;\n\n  const boards = _objectSpread(_objectSpread({}, scrum_boards.boards), {}, {\n    [board_id]: _objectSpread(_objectSpread({}, scrum_boards.boards[board_id]), {}, {\n      column_orders: scrum_boards.boards[board_id].column_orders.filter(order => order !== column_id)\n    })\n  });\n\n  scrum_boards = _objectSpread(_objectSpread({}, scrum_boards), {}, {\n    columns,\n    boards\n  });\n  saveState('scrum_boards', scrum_boards);\n  yield put(scrumBoardActions.deleteColumn({\n    columns,\n    boards\n  }));\n}\n\nfunction* moveColumnEffectSaga({\n  payload: {\n    board_id,\n    column_orders\n  }\n}) {\n  let scrum_boards = yield select(getScrumBoards);\n\n  const boards = _objectSpread(_objectSpread({}, scrum_boards.boards), {}, {\n    [board_id]: _objectSpread(_objectSpread({}, scrum_boards.boards[board_id]), {}, {\n      column_orders: column_orders\n    })\n  });\n\n  scrum_boards = _objectSpread(_objectSpread({}, scrum_boards), {}, {\n    boards: boards\n  });\n  saveState('scrum_boards', scrum_boards);\n  yield put(scrumBoardActions.setMovedColumn(boards));\n}\n\nfunction* createOrUpdateTaskEffectSaga(action) {\n  let scrum_boards = yield select(getScrumBoards);\n\n  const tasks = _objectSpread(_objectSpread({}, scrum_boards.tasks), {}, {\n    [action.payload.id]: _objectSpread(_objectSpread({}, action.payload), {}, {\n      editing: false\n    })\n  });\n\n  let columns = scrum_boards.columns;\n\n  if (!action.payload.editing) {\n    columns = _objectSpread(_objectSpread({}, scrum_boards.columns), {}, {\n      [action.payload.column_id]: _objectSpread(_objectSpread({}, scrum_boards.columns[action.payload.column_id]), {}, {\n        task_orders: [...scrum_boards.columns[action.payload.column_id].task_orders, action.payload.id]\n      })\n    });\n  }\n\n  scrum_boards = {\n    columns: columns,\n    tasks: tasks,\n    boards: scrum_boards.boards\n  };\n  saveState('scrum_boards', scrum_boards);\n  yield put(scrumBoardActions.createOrUpdateTask({\n    tasks,\n    columns\n  }));\n}\n\nfunction* deleteTaskEffectSaga({\n  payload: {\n    task_id,\n    column_id\n  }\n}) {\n  let scrum_boards = yield select(getScrumBoards);\n  const tasks = Object.keys(scrum_boards.tasks).reduce((object, key) => {\n    if (key !== task_id) {\n      object[key] = scrum_boards.tasks[key];\n    }\n\n    return object;\n  }, {});\n\n  const columns = _objectSpread(_objectSpread({}, scrum_boards.columns), {}, {\n    [column_id]: _objectSpread(_objectSpread({}, scrum_boards.columns[column_id]), {}, {\n      task_orders: scrum_boards.columns[column_id].task_orders.filter(order => order !== task_id)\n    })\n  });\n\n  scrum_boards = {\n    columns: columns,\n    tasks: tasks,\n    boards: scrum_boards.boards\n  };\n  saveState('scrum_boards', scrum_boards);\n  yield put(scrumBoardActions.deleteTask({\n    columns,\n    tasks\n  }));\n}\n\nfunction* moveTaskEffectSaga({\n  payload: {\n    tasks,\n    columns\n  }\n}) {\n  let scrum_boards = yield select(getScrumBoards);\n  scrum_boards = {\n    columns: columns,\n    tasks: tasks,\n    boards: scrum_boards.boards\n  };\n  saveState('scrum_boards', scrum_boards);\n  yield put(scrumBoardActions.setMovedTask({\n    columns,\n    tasks\n  }));\n}\n\nexport default function* scrumBoardSaga() {\n  yield all([takeEvery(scrumBoardActions.LOAD_BOARDS_DATA_SAGA, boardsRenderEffectSaga), takeEvery(scrumBoardActions.LOAD_CURRENT_BOARD_DATA_SAGA, boardRenderEffectSaga), takeEvery(scrumBoardActions.CREATE_OR_UPDATE_BOARD_WATCHER, createOrUpdateBoardEffectSaga), takeEvery(scrumBoardActions.DELETE_BOARD_WATCHER, deleteBoardEffectSaga), takeEvery(scrumBoardActions.CREATE_OR_UPDATE_COLUMN_WATCHER, createOrUpdateColumnEffectSaga), takeEvery(scrumBoardActions.DELETE_COLUMN_WATCHER, deleteColumnEffectSaga), takeEvery(scrumBoardActions.MOVE_COLUMN_WATCHER, moveColumnEffectSaga), takeEvery(scrumBoardActions.CREATE_OR_UPDATE_TASK_WATCHER, createOrUpdateTaskEffectSaga), takeEvery(scrumBoardActions.DELETE_TASK_WATCHER, deleteTaskEffectSaga), takeEvery(scrumBoardActions.MOVE_TASK_WATCHER, moveTaskEffectSaga)]);\n}","map":null,"metadata":{},"sourceType":"module"}