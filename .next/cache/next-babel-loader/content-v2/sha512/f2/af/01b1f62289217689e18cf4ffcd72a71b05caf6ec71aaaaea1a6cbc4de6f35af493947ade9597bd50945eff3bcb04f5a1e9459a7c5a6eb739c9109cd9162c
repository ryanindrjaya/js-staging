{"ast":null,"code":"import _defineProperty from \"/Users/yudiananta/Development/NextJS/ERP Dev/JS Deploy/JS-Deploy/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport scrumBoardActions from './actions';\nvar initialState = {\n  boards: {},\n  columns: {},\n  tasks: {},\n  searchText: '',\n  labels: {}\n};\nexport default function scrumBoardReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case scrumBoardActions.SET_BOARDS_DATA:\n      return _objectSpread(_objectSpread({}, state), action.payload);\n\n    case scrumBoardActions.SET_CURRENT_BOARD_DATA:\n      return _objectSpread(_objectSpread({}, state), action.payload);\n\n    case scrumBoardActions.CREATE_OR_UPDATE_TASK:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        tasks: action.payload.tasks,\n        columns: action.payload.columns\n      });\n\n    case scrumBoardActions.EDIT_TASK:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        tasks: _objectSpread(_objectSpread({}, state.tasks), {}, _defineProperty({}, action.payload.id, _objectSpread(_objectSpread({}, action.payload), {}, {\n          editing: true\n        })))\n      });\n\n    case scrumBoardActions.CANCEL_EDIT_TASK:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        tasks: _objectSpread(_objectSpread({}, state.tasks), {}, _defineProperty({}, action.payload.id, _objectSpread(_objectSpread({}, action.payload), {}, {\n          editing: false\n        })))\n      });\n\n    case scrumBoardActions.DELETE_TASK:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        tasks: action.payload.tasks,\n        columns: action.payload.columns\n      });\n\n    case scrumBoardActions.SET_SEARCH_TEXT:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        searchText: action.payload\n      });\n\n    case scrumBoardActions.SET_MOVED_TASK:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        columns: action.payload.columns,\n        tasks: action.payload.tasks\n      });\n\n    case scrumBoardActions.RESET_TASK:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          task: initialState.task\n        });\n      }\n    /// COLUMNS\n\n    case scrumBoardActions.CREATE_OR_UPDATE_COLUMN:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        columns: action.payload.columns,\n        boards: action.payload.boards\n      });\n\n    case scrumBoardActions.EDIT_COLUMN:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        columns: _objectSpread(_objectSpread({}, state.columns), {}, _defineProperty({}, action.payload.id, _objectSpread(_objectSpread({}, action.payload), {}, {\n          editing: true\n        })))\n      });\n\n    case scrumBoardActions.CANCEL_EDIT_COLUMN:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        columns: _objectSpread(_objectSpread({}, state.columns), {}, _defineProperty({}, action.payload.id, _objectSpread(_objectSpread({}, action.payload), {}, {\n          editing: false\n        })))\n      });\n\n    case scrumBoardActions.DELETE_COLUMN:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        columns: action.payload.columns,\n        boards: action.payload.boards\n      });\n\n    case scrumBoardActions.SET_MOVED_COLUMN:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        boards: action.payload\n      });\n\n    case scrumBoardActions.CREATE_OR_UPDATE_BOARD:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        boards: action.payload\n      });\n\n    case scrumBoardActions.EDIT_BOARD:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        boards: _objectSpread(_objectSpread({}, state.boards), {}, _defineProperty({}, action.payload.id, _objectSpread(_objectSpread({}, action.payload), {}, {\n          editing: true\n        })))\n      });\n\n    case scrumBoardActions.DELETE_BOARD:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        boards: action.payload\n      });\n\n    case scrumBoardActions.CREATE_OR_UPDATE_LABEL:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        labels: _objectSpread(_objectSpread({}, state.labels), {}, _defineProperty({}, action.payload.id, action.payload))\n      });\n\n    case scrumBoardActions.EDIT_LABEL:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        labels: _objectSpread(_objectSpread({}, state.labels), {}, _defineProperty({}, action.payload.id, _objectSpread(_objectSpread({}, action.payload), {}, {\n          editing: true\n        })))\n      });\n\n    case scrumBoardActions.DELETE_LABEL:\n      var LABELS = _objectSpread({}, state.labels);\n\n      delete LABELS[action.payload];\n      return _objectSpread(_objectSpread({}, state), {}, {\n        labels: LABELS\n      });\n\n    default:\n      return state;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}