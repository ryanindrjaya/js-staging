{"ast":null,"code":"import { all, takeLatest, put, call, fork } from 'redux-saga/effects';\nimport fetch from 'isomorphic-unfetch';\nimport { login, logout, removeCookie } from './auth.utils';\nimport { notification } from '@iso/components';\nimport JwtAuthentication from './jwtAuthentication';\nimport actions from './actions';\nconst ApiUrl = '/api/login';\n\nfunction* loginRequest({\n  payload: {\n    user\n  }\n}) {\n  try {\n    const response = yield fetch(ApiUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        user\n      })\n    });\n\n    if (response.status === 200) {\n      const {\n        token\n      } = yield response.json();\n      yield call(login, {\n        token\n      });\n      yield put(actions.loginRequestSuccess(token));\n    } else {\n      let error = new Error(response.statusText);\n      error.response = response;\n      throw error;\n    }\n  } catch (error) {\n    yield put(actions.loginRequestFailure(error));\n  }\n}\n\nexport function* jwtLoginRequest() {// yield takeLatest(actions.JWT_LOGIN_REQUEST, function*({ payload }) {\n  //   const result = yield call(JwtAuthentication.login, payload.userInfo);\n  //   if (result.error) {\n  //     notification('error', result.error);\n  //     yield put(actions.loginRequestFailure(error));\n  //   } else {\n  //     payload.history.push('/dashboard');\n  //     yield put({\n  //       type: actions.LOGIN_REQUEST_SUCCESS,\n  //       token: result.token,\n  //       profile: result.profile,\n  //     });\n  //   }\n  // });\n}\n\nfunction* logoutRequest() {\n  try {\n    yield call(logout);\n    yield put(actions.logoutRequestSuccess());\n  } catch (error) {\n    yield put(actions.logoutRequestFailure(error));\n  }\n} // export function* loginSuccess() {\n//   yield takeLatest(actions.LOGIN_SUCCESS, function*(payload) {\n//     setCookie('login_saga', payload.token);\n//     yield setCookie('id_token', payload.token);\n//   });\n// }\n// export function* loginError() {\n//   yield takeLatest(actions.LOGIN_ERROR, function*() {});\n// }\n\n\nexport function* onLogin() {\n  yield takeLatest(actions.LOGIN_REQUEST_START, loginRequest);\n}\nexport function* onLogout() {\n  yield takeLatest(actions.LOGOUT_REQUEST_START, logoutRequest);\n}\nexport default function* rootSaga() {\n  yield all([call(onLogin), call(jwtLoginRequest), call(onLogout)]);\n}","map":null,"metadata":{},"sourceType":"module"}