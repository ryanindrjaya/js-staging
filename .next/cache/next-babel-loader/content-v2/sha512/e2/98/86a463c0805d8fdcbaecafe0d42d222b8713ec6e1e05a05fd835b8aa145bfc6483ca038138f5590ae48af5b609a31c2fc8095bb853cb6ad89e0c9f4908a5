{"ast":null,"code":"import _defineProperty from \"/Users/yudiananta/Development/NextJS/ERP Dev/JS Deploy/JS-Deploy/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { isServer } from '@iso/lib/helpers/isServer';\nvar productDatas = [];\n\nfunction getInitData() {\n  var productQuantity = [];\n  var products = {};\n\n  if (!isServer) {\n    var cartProductQuantity = localStorage.getItem('cartProductQuantity');\n    var cartProducts = localStorage.getItem('cartProducts');\n\n    if (cartProducts && cartProductQuantity) {\n      cartProducts = JSON.parse(cartProducts);\n      JSON.parse(cartProductQuantity).forEach(function (product) {\n        var objectID = product.objectID;\n\n        if (!isNaN(product.quantity)) {\n          productQuantity.push({\n            objectID: objectID,\n            quantity: parseInt(product.quantity, 10)\n          });\n          products[objectID] = _objectSpread(_objectSpread({}, cartProducts[objectID]), {}, {\n            price: parseFloat(cartProducts[objectID].price, 10)\n          });\n        }\n      });\n    } else {\n      productDatas.forEach(function (product) {\n        productQuantity.push({\n          objectID: product.objectID,\n          quantity: 1\n        });\n        products[product.objectID] = product;\n      });\n    }\n  }\n\n  return {\n    productQuantity: productQuantity,\n    products: products\n  };\n}\n\nexport default getInitData();","map":null,"metadata":{},"sourceType":"module"}