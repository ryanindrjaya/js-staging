{"ast":null,"code":"import _toConsumableArray from \"/Users/yudiananta/Development/NextJS/ERP Dev/JS Deploy/JS-Deploy/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"/Users/yudiananta/Development/NextJS/ERP Dev/JS Deploy/JS-Deploy/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport quizActions from './actions';\nimport { arrayEqual } from '@iso/lib/helpers/utility';\nvar initialState = {\n  quizes: {},\n  questions: {},\n  gettingStarted: false,\n  activeQuestion: 0,\n  total: 0,\n  correct: 0,\n  wrong: 0,\n  submitted: false,\n  answers: false\n};\nexport default function questionReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case quizActions.START_QUIZ:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        gettingStarted: true\n      });\n\n    case quizActions.SET_QUIZ_DATA:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        quizes: action.payload,\n        gettingStarted: false\n      });\n\n    case quizActions.SET_QUESTION_DATA:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        questions: action.payload,\n        total: action.payload.total\n      });\n\n    case quizActions.SET_QUESTION_ANSWER:\n      var questions = state.questions,\n          activeQuestion = state.activeQuestion,\n          correct = state.correct,\n          wrong = state.wrong;\n      var currentQuizz = questions.data[activeQuestion];\n      var rightAnswer = false;\n\n      if (Array.isArray(action.payload)) {\n        rightAnswer = arrayEqual(action.payload, currentQuizz['answers']);\n      } else {\n        rightAnswer = currentQuizz['answers'] === action.payload ? true : false;\n      }\n\n      var correctAnswer = rightAnswer ? correct + 1 : correct;\n      var wrongAnswer = !rightAnswer ? wrong + 1 : wrong;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        correct: correctAnswer,\n        wrong: wrongAnswer,\n        submitted: true,\n        answers: rightAnswer,\n        questions: {\n          data: [].concat(_toConsumableArray(questions.data.slice(0, activeQuestion)), [_objectSpread(_objectSpread({}, questions.data[activeQuestion]), {}, {\n            showAnswer: true\n          })], _toConsumableArray(questions.data.slice(activeQuestion + 1)))\n        }\n      });\n\n    case quizActions.NEXT_QUESTION:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        activeQuestion: state.activeQuestion + 1,\n        submitted: false,\n        answers: false\n      });\n\n    default:\n      return state;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}