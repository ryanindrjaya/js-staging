{"ast":null,"code":"import _toConsumableArray from \"/Users/yudiananta/Development/NextJS/ERP Dev/JS Deploy/ERP-Sejati/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"/Users/yudiananta/Development/NextJS/ERP Dev/JS Deploy/ERP-Sejati/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"/Users/yudiananta/Development/NextJS/ERP Dev/JS Deploy/ERP-Sejati/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport _regeneratorRuntime from \"/Users/yudiananta/Development/NextJS/ERP Dev/JS Deploy/ERP-Sejati/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport { db } from './firebase';\nexport function convertCollectionsSnapshotToMap(snapshots) {\n  return snapshots.docs.reduce(function (accumulator, collection) {\n    accumulator[collection.id] = collection.data();\n    return accumulator;\n  }, {});\n}\nexport function getNewDocRef(_x) {\n  return _getNewDocRef.apply(this, arguments);\n}\n\nfunction _getNewDocRef() {\n  _getNewDocRef = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(collectionName) {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return db.collection(collectionName).doc();\n\n          case 2:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _getNewDocRef.apply(this, arguments);\n}\n\nexport function addDocument(_x2, _x3) {\n  return _addDocument.apply(this, arguments);\n}\n\nfunction _addDocument() {\n  _addDocument = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(collectionName, documentData) {\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return db.collection(collectionName).add(documentData).then(function (docRef) {\n              return docRef.id;\n            });\n\n          case 2:\n            return _context3.abrupt(\"return\", _context3.sent);\n\n          case 3:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _addDocument.apply(this, arguments);\n}\n\nexport function setDocument(_x4, _x5, _x6) {\n  return _setDocument.apply(this, arguments);\n}\n\nfunction _setDocument() {\n  _setDocument = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(collectionName, docRef, documentData) {\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return db.collection(collectionName).doc(docRef).set(documentData);\n\n          case 2:\n            return _context4.abrupt(\"return\", _context4.sent);\n\n          case 3:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _setDocument.apply(this, arguments);\n}\n\nexport function getDocuments(_x7) {\n  return _getDocuments.apply(this, arguments);\n}\n\nfunction _getDocuments() {\n  _getDocuments = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(collectionName) {\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.next = 2;\n            return db.collection(collectionName).get().then(function (querySnapshot) {\n              return querySnapshot.docs.map(function (doc) {\n                return _objectSpread({\n                  id: doc.id\n                }, doc.data());\n              });\n            });\n\n          case 2:\n            return _context5.abrupt(\"return\", _context5.sent);\n\n          case 3:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n  return _getDocuments.apply(this, arguments);\n}\n\nexport function getDocumentsByQuery(_x8, _x9) {\n  return _getDocumentsByQuery.apply(this, arguments);\n}\n\nfunction _getDocumentsByQuery() {\n  _getDocumentsByQuery = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(collectionName, query) {\n    var _console, _db$collection;\n\n    return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            (_console = console).log.apply(_console, _toConsumableArray(query).concat([collectionName, 'test']));\n\n            _context6.next = 3;\n            return (_db$collection = db.collection(collectionName)).where.apply(_db$collection, _toConsumableArray(query)).get().then(function (querySnapshot) {\n              return querySnapshot.docs.map(function (doc) {\n                return _objectSpread({\n                  id: doc.id\n                }, doc.data());\n              });\n            });\n\n          case 3:\n            return _context6.abrupt(\"return\", _context6.sent);\n\n          case 4:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6);\n  }));\n  return _getDocumentsByQuery.apply(this, arguments);\n}\n\nexport function deleteDocuments(_x10) {\n  return _deleteDocuments.apply(this, arguments);\n}\n\nfunction _deleteDocuments() {\n  _deleteDocuments = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(collectionName) {\n    var collectionRef, batch;\n    return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            collectionRef = db.collection(collectionName);\n            batch = db.batch();\n            _context7.next = 4;\n            return collectionRef.get().then(function (querySnapshot) {\n              return querySnapshot.docs.map(function (doc) {\n                return batch[\"delete\"](collectionRef.doc(doc.id));\n              });\n            });\n\n          case 4:\n            _context7.next = 6;\n            return batch.commit().then(function () {\n              console.log('Batch Deletion successfully committed!');\n            });\n\n          case 6:\n            return _context7.abrupt(\"return\", _context7.sent);\n\n          case 7:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee7);\n  }));\n  return _deleteDocuments.apply(this, arguments);\n}\n\nexport var addCollectionAndDocuments = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(collectionKey, objectsToAdd) {\n    var collectionRef, batch;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            collectionRef = db.collection(collectionKey);\n            batch = db.batch();\n            objectsToAdd.forEach(function (obj) {\n              var newDocRef = collectionRef.doc();\n              batch.set(newDocRef, obj);\n            });\n            _context.next = 5;\n            return batch.commit().then(function () {\n              console.log('Batch Addition successfully committed!');\n            });\n\n          case 5:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function addCollectionAndDocuments(_x11, _x12) {\n    return _ref.apply(this, arguments);\n  };\n}(); // const { title, items } = doc.data();\n//     return {\n//       routeName: encodeURI(title.toLowerCase()),\n//       id: doc.id,\n//       title,\n//       items,\n//     };\n//   });\n//   console.log(transformedCollection);\n//   return transformedCollection.reduce((accumulator, collection) => {\n//     accumulator[collection.title.toLowerCase()] = collection;\n//     return accumulator;\n//   }, {});","map":null,"metadata":{},"sourceType":"module"}