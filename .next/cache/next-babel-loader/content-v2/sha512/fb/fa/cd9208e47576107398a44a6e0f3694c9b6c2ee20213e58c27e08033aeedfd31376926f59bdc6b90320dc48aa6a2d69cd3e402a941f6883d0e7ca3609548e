{"ast":null,"code":"import _Layout from \"antd/lib/layout\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport appActions from \"@iso/redux/app/actions\";\nimport TopbarNotification from \"./TopbarNotification\";\nimport TopbarMessage from \"./TopbarMessage\";\nimport TopbarSearch from \"./TopbarSearch\";\nimport TopbarUser from \"./TopbarUser\";\nimport TopbarAddtoCart from \"./TopbarAddToCart\";\nimport TopbarWrapper from \"./Topbar.styles\";\nimport { TopbarMenuIcon } from \"@iso/config/icon.config\";\nimport TagWrapper from \"../UIElements/Tag/Tag.styles\";\nimport nookies from 'nookies';\nimport Tags from \"@iso/components/uielements/tag\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst {\n  Header\n} = _Layout;\nconst {\n  toggleCollapsed\n} = appActions;\n\nconst Tag = props => /*#__PURE__*/_jsx(TagWrapper, {\n  children: /*#__PURE__*/_jsx(Tags, _objectSpread(_objectSpread({}, props), {}, {\n    children: props.children\n  }))\n});\n\nclass Topbar extends Component {\n  render() {\n    const {\n      toggleCollapsed,\n      url,\n      customizedTheme,\n      locale\n    } = this.props;\n    const collapsed = this.props.collapsed && !this.props.openDrawer;\n    const cookies = nookies.get(null);\n    const role = (cookies === null || cookies === void 0 ? void 0 : cookies.role) || 'guest';\n    const styling = {\n      background: customizedTheme.backgroundColor,\n      position: \"fixed\",\n      width: \"100%\",\n      height: 70\n    };\n    return /*#__PURE__*/_jsx(TopbarWrapper, {\n      children: /*#__PURE__*/_jsxs(Header, {\n        style: styling,\n        className: collapsed ? \"isomorphicTopbar collapsed\" : \"isomorphicTopbar\",\n        children: [/*#__PURE__*/_jsx(\"div\", {\n          className: \"isoLeft\",\n          children: /*#__PURE__*/_jsx(\"button\", {\n            className: collapsed ? \"triggerBtn menuCollapsed\" : \"triggerBtn menuOpen\",\n            style: {\n              color: customizedTheme.textColor\n            },\n            onClick: toggleCollapsed,\n            children: /*#__PURE__*/_jsx(TopbarMenuIcon, {\n              size: 24,\n              color: customizedTheme.textColor\n            })\n          })\n        }), /*#__PURE__*/_jsxs(\"ul\", {\n          className: \"isoRight\",\n          children: [/*#__PURE__*/_jsx(\"li\", {\n            children: /*#__PURE__*/_jsx(Tag, {\n              color: process.env.MAIN_COLOR,\n              children: role\n            })\n          }), /*#__PURE__*/_jsx(\"li\", {\n            onClick: () => this.setState({\n              selectedItem: \"user\"\n            }),\n            className: \"isoUser\",\n            children: /*#__PURE__*/_jsx(TopbarUser, {\n              locale: locale\n            })\n          })]\n        })]\n      })\n    });\n  }\n\n}\n\nexport default connect(state => _objectSpread(_objectSpread({}, state.App), {}, {\n  locale: state.LanguageSwitcher.language.locale,\n  customizedTheme: state.ThemeSwitcher.topbarTheme\n}), {\n  toggleCollapsed\n})(Topbar);","map":null,"metadata":{},"sourceType":"module"}