{"ast":null,"code":"import _Progress from \"antd/lib/progress\";\nvar _jsxFileName = \"/Users/yudiananta/Development/NextJS/ERP Dev/JS Deploy/JS-Deploy/components/Form/UploadProduk.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from \"react\";\nimport * as XLSX from \"xlsx\";\nimport { productKeys } from \"./utils/productKeys\";\nimport { getRelationalData, getLocationsId } from \"./utils/getRelationalData\";\nimport nookies from \"nookies\";\nimport { toast } from \"react-toastify\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function UploadProduk({\n  setProduct\n}) {\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: percent,\n    1: setPercent\n  } = useState(0);\n  const {\n    0: error,\n    1: setError\n  } = useState(null);\n  const {\n    0: status,\n    1: setStatus\n  } = useState(\"\");\n  console.log(\"percent\", percent);\n\n  const postData = data => {\n    let increment = 100 / data.length;\n    console.log(\"increment\", increment);\n    const cookies = nookies.get(null);\n    const endpoint = process.env.NEXT_PUBLIC_URL + \"/products\";\n\n    try {\n      data.forEach(async (row, idx) => {\n        const data = {\n          data: row\n        };\n        const options = {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: \"Bearer \" + cookies.token\n          },\n          body: JSON.stringify(data)\n        };\n        console.log(\"options\", options);\n\n        try {\n          const req = await fetch(endpoint, options);\n          const res = await req.json();\n          setPercent(prev => Math.round(prev + increment));\n\n          if (req.status == 200) {\n            const endpointProduct = process.env.NEXT_PUBLIC_URL + \"/products?populate=*\";\n            const optionsAllProduct = {\n              method: \"GET\",\n              headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: \"Bearer \" + cookies.token\n              }\n            };\n            const reqProduct = await fetch(endpointProduct, optionsAllProduct);\n            const resProduct = await reqProduct.json();\n            setProduct(resProduct);\n          }\n        } catch (err) {\n          console.log(err);\n        }\n      });\n    } catch (err) {\n      toast.error(\"Gagal mengunggah data\");\n      setLoading(false);\n    }\n  };\n\n  const convertToJson = async data => {\n    const rows = data.map(async row => {\n      var _rowData, _rowData$category, _rowData2, _rowData2$sub_categor, _rowData3, _rowData3$group, _rowData4, _rowData4$manufacture, _rowData5, _rowData5$locations;\n\n      let rowData = {};\n      row.forEach((element, index) => {\n        rowData[productKeys[index]] = element;\n      });\n\n      if (!rowData.SKU) {\n        return;\n      } // process relational data\n\n\n      const categoryIdRaw = ((_rowData = rowData) === null || _rowData === void 0 ? void 0 : (_rowData$category = _rowData.category) === null || _rowData$category === void 0 ? void 0 : _rowData$category.split(\"-\")[0].trim()) || \"\";\n      const subCategoryIdRaw = ((_rowData2 = rowData) === null || _rowData2 === void 0 ? void 0 : (_rowData2$sub_categor = _rowData2.sub_category) === null || _rowData2$sub_categor === void 0 ? void 0 : _rowData2$sub_categor.split(\"-\")[0].trim()) || \"\";\n      const groupAliasRaw = ((_rowData3 = rowData) === null || _rowData3 === void 0 ? void 0 : (_rowData3$group = _rowData3.group) === null || _rowData3$group === void 0 ? void 0 : _rowData3$group.split(\"-\")[0].trim()) || \"\";\n      const manufactureAliasRaw = ((_rowData4 = rowData) === null || _rowData4 === void 0 ? void 0 : (_rowData4$manufacture = _rowData4.manufacture) === null || _rowData4$manufacture === void 0 ? void 0 : _rowData4$manufacture.split(\"-\")[0].trim()) || \"\";\n      const locationNamesArrRaw = ((_rowData5 = rowData) === null || _rowData5 === void 0 ? void 0 : (_rowData5$locations = _rowData5.locations) === null || _rowData5$locations === void 0 ? void 0 : _rowData5$locations.split(\",\")) || [];\n      const locationsNamesTrimmed = locationNamesArrRaw.map(item => item === null || item === void 0 ? void 0 : item.trim());\n      console.log(\"manufacture alias\", manufactureAliasRaw);\n      const categoryId = await getRelationalData(\"categories\", \"category_id\", categoryIdRaw);\n      const subCategoryId = await getRelationalData(\"sub-categories\", \"sub_id\", subCategoryIdRaw);\n      const groupId = await getRelationalData(\"groups\", \"alias\", groupAliasRaw);\n      const manufactureId = await getRelationalData(\"manufactures\", \"code\", manufactureAliasRaw);\n      const locationsId = await getLocationsId(locationsNamesTrimmed);\n      rowData = _objectSpread(_objectSpread({}, rowData), {}, {\n        category: categoryId,\n        sub_category: subCategoryId,\n        group: groupId,\n        manufacture: manufactureId,\n        locations: locationsId\n      });\n      return rowData;\n    });\n    const resolvedRows = await Promise.all(rows);\n    return resolvedRows;\n  };\n\n  const importExcel = e => {\n    setLoading(true);\n    console.log(e.target.files);\n\n    try {\n      const file = e.target.files[0];\n      const reader = new FileReader();\n\n      reader.onload = async event => {\n        const bstr = event.target.result;\n        const workbook = XLSX.read(bstr, {\n          type: \"binary\"\n        });\n        const workSheetName = workbook.SheetNames[0];\n        const workSheet = workbook.Sheets[workSheetName];\n        const fileData = XLSX.utils.sheet_to_json(workSheet, {\n          header: 1\n        });\n        fileData.splice(0, 2);\n        const rowsData = await convertToJson(fileData);\n        postData(rowsData);\n      };\n\n      reader.readAsBinaryString(file);\n    } catch (err) {\n      setError(\"gagal ges ges\");\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (percent >= 100) {\n      toast.success(\"Berhasil mengunggah data\");\n      setLoading(false);\n      setPercent(0);\n    }\n  }, [percent]);\n  useEffect(() => {\n    if (error !== null) {\n      toast.error(error);\n      setTimeout(() => {\n        setError(null);\n      }, 2000);\n    }\n  }, [error]);\n  return loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center justify-center w-full\",\n    children: /*#__PURE__*/_jsxDEV(_Progress, {\n      type: \"circle\",\n      width: 35,\n      percent: percent,\n      status: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"upload_file\",\n      className: \"bg-cyan-700 cursor-pointer text-xs font-bold text-white w-full rounded h-10 hover:bg-cyan-800  shadow-sm flex items-center justify-center float-right\",\n      children: \"Upload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      onChange: importExcel,\n      type: \"file\",\n      id: \"upload_file\",\n      hidden: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}","map":{"version":3,"sources":["/Users/yudiananta/Development/NextJS/ERP Dev/JS Deploy/JS-Deploy/components/Form/UploadProduk.js"],"names":["React","useEffect","useState","XLSX","productKeys","getRelationalData","getLocationsId","nookies","toast","UploadProduk","setProduct","loading","setLoading","percent","setPercent","error","setError","status","setStatus","console","log","postData","data","increment","length","cookies","get","endpoint","process","env","NEXT_PUBLIC_URL","forEach","row","idx","options","method","headers","Authorization","token","body","JSON","stringify","req","fetch","res","json","prev","Math","round","endpointProduct","optionsAllProduct","reqProduct","resProduct","err","convertToJson","rows","map","rowData","element","index","SKU","categoryIdRaw","category","split","trim","subCategoryIdRaw","sub_category","groupAliasRaw","group","manufactureAliasRaw","manufacture","locationNamesArrRaw","locations","locationsNamesTrimmed","item","categoryId","subCategoryId","groupId","manufactureId","locationsId","resolvedRows","Promise","all","importExcel","e","target","files","file","reader","FileReader","onload","event","bstr","result","workbook","read","type","workSheetName","SheetNames","workSheet","Sheets","fileData","utils","sheet_to_json","header","splice","rowsData","readAsBinaryString","success","setTimeout"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport * as XLSX from \"xlsx\";\nimport { productKeys } from \"./utils/productKeys\";\nimport { getRelationalData, getLocationsId } from \"./utils/getRelationalData\";\nimport nookies from \"nookies\";\nimport { toast } from \"react-toastify\";\nimport { Progress } from \"antd\";\n\nexport default function UploadProduk({ setProduct }) {\n  const [loading, setLoading] = useState(false);\n  const [percent, setPercent] = useState(0);\n  const [error, setError] = useState(null);\n  const [status, setStatus] = useState(\"\");\n\n  console.log(\"percent\", percent);\n\n  const postData = (data) => {\n    let increment = 100 / data.length;\n    console.log(\"increment\", increment);\n    const cookies = nookies.get(null);\n    const endpoint = process.env.NEXT_PUBLIC_URL + \"/products\";\n\n    try {\n      data.forEach(async (row, idx) => {\n        const data = {\n          data: row,\n        };\n        const options = {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: \"Bearer \" + cookies.token,\n          },\n          body: JSON.stringify(data),\n        };\n\n        console.log(\"options\", options);\n\n        try {\n          const req = await fetch(endpoint, options);\n          const res = await req.json();\n\n          setPercent((prev) => Math.round(prev + increment));\n\n          if (req.status == 200) {\n            const endpointProduct = process.env.NEXT_PUBLIC_URL + \"/products?populate=*\";\n\n            const optionsAllProduct = {\n              method: \"GET\",\n              headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: \"Bearer \" + cookies.token,\n              },\n            };\n\n            const reqProduct = await fetch(endpointProduct, optionsAllProduct);\n            const resProduct = await reqProduct.json();\n\n            setProduct(resProduct);\n          }\n        } catch (err) {\n          console.log(err);\n        }\n      });\n    } catch (err) {\n      toast.error(\"Gagal mengunggah data\");\n      setLoading(false);\n    }\n  };\n\n  const convertToJson = async (data) => {\n    const rows = data.map(async (row) => {\n      let rowData = {};\n      row.forEach((element, index) => {\n        rowData[productKeys[index]] = element;\n      });\n\n      if (!rowData.SKU) {\n        return;\n      }\n\n      // process relational data\n      const categoryIdRaw = rowData?.category?.split(\"-\")[0].trim() || \"\";\n      const subCategoryIdRaw = rowData?.sub_category?.split(\"-\")[0].trim() || \"\";\n      const groupAliasRaw = rowData?.group?.split(\"-\")[0].trim() || \"\";\n      const manufactureAliasRaw = rowData?.manufacture?.split(\"-\")[0].trim() || \"\";\n      const locationNamesArrRaw = rowData?.locations?.split(\",\") || [];\n      const locationsNamesTrimmed = locationNamesArrRaw.map((item) => item?.trim());\n\n      console.log(\"manufacture alias\", manufactureAliasRaw);\n\n      const categoryId = await getRelationalData(\"categories\", \"category_id\", categoryIdRaw);\n      const subCategoryId = await getRelationalData(\"sub-categories\", \"sub_id\", subCategoryIdRaw);\n      const groupId = await getRelationalData(\"groups\", \"alias\", groupAliasRaw);\n      const manufactureId = await getRelationalData(\"manufactures\", \"code\", manufactureAliasRaw);\n      const locationsId = await getLocationsId(locationsNamesTrimmed);\n\n      rowData = {\n        ...rowData,\n        category: categoryId,\n        sub_category: subCategoryId,\n        group: groupId,\n        manufacture: manufactureId,\n        locations: locationsId,\n      };\n\n      return rowData;\n    });\n\n    const resolvedRows = await Promise.all(rows);\n    return resolvedRows;\n  };\n\n  const importExcel = (e) => {\n    setLoading(true);\n\n    console.log(e.target.files);\n    try {\n      const file = e.target.files[0];\n      const reader = new FileReader();\n      reader.onload = async (event) => {\n        const bstr = event.target.result;\n        const workbook = XLSX.read(bstr, { type: \"binary\" });\n        const workSheetName = workbook.SheetNames[0];\n        const workSheet = workbook.Sheets[workSheetName];\n        const fileData = XLSX.utils.sheet_to_json(workSheet, { header: 1 });\n        fileData.splice(0, 2);\n        const rowsData = await convertToJson(fileData);\n        postData(rowsData);\n      };\n      reader.readAsBinaryString(file);\n    } catch (err) {\n      setError(\"gagal ges ges\");\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (percent >= 100) {\n      toast.success(\"Berhasil mengunggah data\");\n      setLoading(false);\n      setPercent(0);\n    }\n  }, [percent]);\n\n  useEffect(() => {\n    if (error !== null) {\n      toast.error(error);\n      setTimeout(() => {\n        setError(null);\n      }, 2000);\n    }\n  }, [error]);\n\n  return loading ? (\n    <div className=\"flex flex-col items-center justify-center w-full\">\n      <Progress type=\"circle\" width={35} percent={percent} status={status} />\n    </div>\n  ) : (\n    <>\n      <label\n        htmlFor=\"upload_file\"\n        className=\"bg-cyan-700 cursor-pointer text-xs font-bold text-white w-full rounded h-10 hover:bg-cyan-800  shadow-sm flex items-center justify-center float-right\"\n      >\n        Upload\n      </label>\n      <input onChange={importExcel} type=\"file\" id=\"upload_file\" hidden />\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}