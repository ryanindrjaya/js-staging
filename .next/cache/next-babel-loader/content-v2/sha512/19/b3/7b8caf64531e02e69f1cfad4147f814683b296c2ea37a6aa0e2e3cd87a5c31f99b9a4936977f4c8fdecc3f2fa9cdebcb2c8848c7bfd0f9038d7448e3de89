{"ast":null,"code":"import _toConsumableArray from \"/Users/yudiananta/Development/NextJS/ERP Dev/JS Deploy/ERP-Sejati/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nvar notesAction = {\n  CHANGE_NOTE: 'CHANGE_NOTE',\n  ADD_NOTE: 'ADD_NOTE',\n  EDIT_NOTE: 'EDIT_NOTE',\n  DELETE_NOTE: 'DELETE_NOTE',\n  CHANGE_COLOR: 'CHANGE_COLOR',\n  changeNote: function changeNote(id) {\n    return function (dispatch, getState) {\n      var notes = getState().Notes.notes;\n      var seectedColor = notes[notes.findIndex(function (note) {\n        return note.id === id;\n      })].color;\n      dispatch({\n        type: notesAction.CHANGE_NOTE,\n        selectedId: id,\n        seectedColor: seectedColor\n      });\n    };\n  },\n  addNote: function addNote() {\n    return function (dispatch, getState) {\n      var newNote = {\n        id: new Date(),\n        note: 'New Note',\n        createTime: new Date(),\n        color: getState().Notes.seectedColor\n      };\n      var notes = [newNote].concat(_toConsumableArray(getState().Notes.notes));\n      dispatch({\n        type: notesAction.ADD_NOTE,\n        selectedId: newNote.id,\n        notes: notes\n      });\n    };\n  },\n  editNote: function editNote(id, newNote) {\n    return function (dispatch, getState) {\n      var oldNotes = getState().Notes.notes;\n      var notes = [];\n      oldNotes.forEach(function (note) {\n        if (note.id !== id) {\n          notes.push(note);\n        } else {\n          note.note = newNote;\n          notes.push(note);\n        }\n      });\n      dispatch({\n        type: notesAction.EDIT_NOTE,\n        notes: notes\n      });\n    };\n  },\n  deleteNote: function deleteNote(id) {\n    return function (dispatch, getState) {\n      var oldNotes = getState().Notes.notes;\n      var notes = [];\n      oldNotes.forEach(function (note) {\n        if (note.id !== id) {\n          notes.push(note);\n        }\n      });\n      var selectedId = getState().Notes.selectedId;\n\n      if (selectedId === id) {\n        if (notes.length === 0) {\n          selectedId = undefined;\n        } else {\n          selectedId = notes[0].id;\n        }\n      }\n\n      dispatch({\n        type: notesAction.DELETE_NOTE,\n        notes: notes,\n        selectedId: selectedId\n      });\n    };\n  },\n  changeColor: function changeColor(seectedColor) {\n    return function (dispatch, getState) {\n      var oldNotes = getState().Notes.notes;\n      var selectedId = getState().Notes.selectedId;\n      var notes = [];\n      oldNotes.forEach(function (note) {\n        if (note.id !== selectedId) {\n          notes.push(note);\n        } else {\n          note.color = seectedColor;\n          notes.push(note);\n        }\n      });\n      dispatch({\n        type: notesAction.CHANGE_COLOR,\n        notes: notes,\n        seectedColor: seectedColor\n      });\n    };\n  }\n};\nexport default notesAction;","map":null,"metadata":{},"sourceType":"module"}